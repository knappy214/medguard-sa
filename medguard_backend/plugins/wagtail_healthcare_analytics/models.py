"""
Healthcare Analytics Models
Models for medical data analytics and reporting.
"""
import uuid
from django.db import models
from django.contrib.auth import get_user_model
from django.utils.translation import gettext_lazy as _
from wagtail.fields import RichTextField
from wagtail.snippets.models import register_snippet

User = get_user_model()


@register_snippet
class AnalyticsReport(models.Model):
    """Model for healthcare analytics reports."""
    
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
        verbose_name=_("ID")
    )
    
    name = models.CharField(
        max_length=255,
        verbose_name=_("Report Name")
    )
    
    report_type = models.CharField(
        max_length=50,
        choices=[
            ('medication_adherence', _('Medication Adherence')),
            ('patient_outcomes', _('Patient Outcomes')),
            ('pharmacy_utilization', _('Pharmacy Utilization')),
            ('drug_interactions', _('Drug Interactions')),
            ('compliance', _('HIPAA Compliance')),
            ('emergency_access', _('Emergency Access')),
            ('custom', _('Custom Report')),
        ],
        verbose_name=_("Report Type")
    )
    
    description = RichTextField(
        blank=True,
        verbose_name=_("Description")
    )
    
    # Report data
    data_points = models.JSONField(
        default=dict,
        verbose_name=_("Data Points")
    )
    
    metrics = models.JSONField(
        default=dict,
        verbose_name=_("Calculated Metrics")
    )
    
    # Generation details
    generated_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        verbose_name=_("Generated By")
    )
    
    generated_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_("Generated At")
    )
    
    report_period_start = models.DateField(
        verbose_name=_("Report Period Start")
    )
    
    report_period_end = models.DateField(
        verbose_name=_("Report Period End")
    )
    
    # Report file
    report_file = models.FileField(
        upload_to='analytics_reports/',
        blank=True,
        verbose_name=_("Report File")
    )
    
    class Meta:
        verbose_name = _("Analytics Report")
        verbose_name_plural = _("Analytics Reports")
        ordering = ["-generated_at"]
    
    def __str__(self):
        return f"{self.name} ({self.generated_at.date()})"


@register_snippet
class Dashboard(models.Model):
    """Model for custom analytics dashboards."""
    
    id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
        verbose_name=_("ID")
    )
    
    name = models.CharField(
        max_length=255,
        verbose_name=_("Dashboard Name")
    )
    
    description = models.TextField(
        blank=True,
        verbose_name=_("Description")
    )
    
    # Dashboard configuration
    widgets = models.JSONField(
        default=list,
        verbose_name=_("Dashboard Widgets"),
        help_text=_("Configuration for dashboard widgets")
    )
    
    layout = models.JSONField(
        default=dict,
        verbose_name=_("Dashboard Layout")
    )
    
    # Access control
    created_by = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        verbose_name=_("Created By")
    )
    
    is_public = models.BooleanField(
        default=False,
        verbose_name=_("Public Dashboard")
    )
    
    allowed_users = models.ManyToManyField(
        User,
        blank=True,
        related_name="accessible_dashboards",
        verbose_name=_("Allowed Users")
    )
    
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_("Created At")
    )
    
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name=_("Updated At")
    )
    
    class Meta:
        verbose_name = _("Analytics Dashboard")
        verbose_name_plural = _("Analytics Dashboards")
        ordering = ["name"]
    
    def __str__(self):
        return self.name
