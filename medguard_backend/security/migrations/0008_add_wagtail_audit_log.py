# Generated by Django 5.2.4 on 2025-08-06 15:39

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('security', '0007_add_healthcare_roles'),
        ('wagtailcore', '0095_query_searchpromotion_querydailyhits'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WagtailAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('page_created', 'Page Created'), ('page_modified', 'Page Modified'), ('page_deleted', 'Page Deleted'), ('page_published', 'Page Published'), ('page_unpublished', 'Page Unpublished'), ('page_viewed', 'Page Viewed'), ('page_accessed', 'Page Accessed'), ('content_exported', 'Content Exported'), ('content_imported', 'Content Imported'), ('image_uploaded', 'Image Uploaded'), ('image_modified', 'Image Modified'), ('image_deleted', 'Image Deleted'), ('document_uploaded', 'Document Uploaded'), ('document_modified', 'Document Modified'), ('document_deleted', 'Document Deleted'), ('user_login', 'User Login'), ('user_logout', 'User Logout'), ('user_permission_changed', 'User Permission Changed'), ('user_role_assigned', 'User Role Assigned'), ('user_role_revoked', 'User Role Revoked'), ('patient_data_accessed', 'Patient Data Accessed'), ('medication_data_modified', 'Medication Data Modified'), ('prescription_created', 'Prescription Created'), ('prescription_modified', 'Prescription Modified'), ('prescription_approved', 'Prescription Approved'), ('prescription_rejected', 'Prescription Rejected'), ('system_backup', 'System Backup'), ('system_restore', 'System Restore'), ('security_alert', 'Security Alert'), ('compliance_check', 'Compliance Check')], help_text='Type of audit event', max_length=50)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Severity level of the audit event', max_length=20)),
                ('description', models.TextField(help_text='Description of the audit event')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='ID of the affected object', null=True)),
                ('object_repr', models.CharField(blank=True, help_text='String representation of the affected object', max_length=200)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('request_path', models.CharField(blank=True, help_text='Request path/URL', max_length=500)),
                ('request_method', models.CharField(blank=True, help_text='HTTP method used', max_length=10)),
                ('session_id', models.CharField(blank=True, help_text='Session ID for the request', max_length=100)),
                ('patient_id', models.CharField(blank=True, help_text='Patient ID if the event involves patient data', max_length=100)),
                ('medication_id', models.CharField(blank=True, help_text='Medication ID if the event involves medication data', max_length=100)),
                ('prescription_id', models.CharField(blank=True, help_text='Prescription ID if the event involves prescription data', max_length=100)),
                ('old_values', models.JSONField(blank=True, default=dict, help_text='Previous values before the change')),
                ('new_values', models.JSONField(blank=True, default=dict, help_text='New values after the change')),
                ('changed_fields', models.JSONField(blank=True, default=list, help_text='List of fields that were changed')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about the audit event')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the audit event occurred')),
                ('content_type', models.ForeignKey(blank=True, help_text='Content type of the affected object', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('page', models.ForeignKey(blank=True, help_text='Page associated with the audit event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_events', to='wagtailcore.page')),
                ('revision', models.ForeignKey(blank=True, help_text='Revision associated with the audit event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_events', to='wagtailcore.revision')),
                ('site', models.ForeignKey(blank=True, help_text='Site associated with the audit event', null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailcore.site')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the audited action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wagtail_audit_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wagtail Audit Log',
                'verbose_name_plural': 'Wagtail Audit Logs',
                'db_table': 'wagtail_audit_logs',
                'ordering': ['-timestamp'],
                'permissions': [('view_audit_logs', 'Can view audit logs'), ('export_audit_logs', 'Can export audit logs'), ('delete_audit_logs', 'Can delete audit logs'), ('anonymize_audit_logs', 'Can anonymize audit logs')],
                'indexes': [models.Index(fields=['event_type', 'timestamp'], name='wagtail_aud_event_t_51c35d_idx'), models.Index(fields=['severity', 'timestamp'], name='wagtail_aud_severit_959005_idx'), models.Index(fields=['user', 'timestamp'], name='wagtail_aud_user_id_16f09a_idx'), models.Index(fields=['page', 'timestamp'], name='wagtail_aud_page_id_b73484_idx'), models.Index(fields=['patient_id', 'timestamp'], name='wagtail_aud_patient_74e059_idx'), models.Index(fields=['medication_id', 'timestamp'], name='wagtail_aud_medicat_29b328_idx'), models.Index(fields=['prescription_id', 'timestamp'], name='wagtail_aud_prescri_59463b_idx'), models.Index(fields=['ip_address', 'timestamp'], name='wagtail_aud_ip_addr_fe4737_idx'), models.Index(fields=['timestamp'], name='wagtail_aud_timesta_4c2795_idx')],
            },
        ),
    ]
