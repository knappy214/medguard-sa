# Generated by Django 5.2.4 on 2025-08-06 15:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0010_add_medical_session'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PasswordPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the password policy', max_length=100, unique=True)),
                ('policy_type', models.CharField(choices=[('patient', 'Patient'), ('caregiver', 'Caregiver'), ('healthcare_provider', 'Healthcare Provider'), ('administrator', 'Administrator'), ('system_admin', 'System Administrator')], help_text='Type of password policy', max_length=30)),
                ('description', models.TextField(blank=True, help_text='Description of the password policy')),
                ('min_length', models.PositiveIntegerField(default=8, help_text='Minimum password length')),
                ('require_uppercase', models.BooleanField(default=True, help_text='Require at least one uppercase letter')),
                ('require_lowercase', models.BooleanField(default=True, help_text='Require at least one lowercase letter')),
                ('require_digits', models.BooleanField(default=True, help_text='Require at least one digit')),
                ('require_special_chars', models.BooleanField(default=True, help_text='Require at least one special character')),
                ('prevent_reuse_count', models.PositiveIntegerField(default=5, help_text='Number of previous passwords to prevent reuse')),
                ('max_age_days', models.PositiveIntegerField(default=90, help_text='Maximum password age in days')),
                ('max_failed_attempts', models.PositiveIntegerField(default=5, help_text='Maximum failed login attempts before lockout')),
                ('lockout_duration_minutes', models.PositiveIntegerField(default=30, help_text='Account lockout duration in minutes')),
                ('require_2fa', models.BooleanField(default=False, help_text='Require two-factor authentication')),
                ('require_2fa_for_admin', models.BooleanField(default=True, help_text='Require 2FA for admin access')),
                ('hipaa_compliant', models.BooleanField(default=True, help_text='Whether this policy meets HIPAA requirements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Password Policy',
                'verbose_name_plural': 'Password Policies',
                'db_table': 'password_policies',
                'ordering': ['name'],
                'permissions': [('view_password_policy', 'Can view password policy'), ('change_password_policy', 'Can change password policy'), ('delete_password_policy', 'Can delete password policy')],
            },
        ),
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('disabled', 'Disabled'), ('enabled', 'Enabled'), ('pending_setup', 'Pending Setup'), ('locked', 'Locked')], default='disabled', help_text='Current 2FA status', max_length=20)),
                ('primary_method', models.CharField(blank=True, choices=[('totp', 'Time-based One-Time Password (TOTP)'), ('sms', 'SMS Code'), ('email', 'Email Code'), ('backup_codes', 'Backup Codes')], help_text='Primary 2FA method', max_length=20, null=True)),
                ('totp_secret', models.CharField(blank=True, help_text='TOTP secret key', max_length=32)),
                ('totp_backup_codes', models.JSONField(blank=True, default=list, help_text='Backup codes for TOTP')),
                ('sms_phone', models.CharField(blank=True, help_text='Phone number for SMS 2FA', max_length=20)),
                ('sms_verified', models.BooleanField(default=False, help_text='Whether SMS number is verified')),
                ('email_verified', models.BooleanField(default=False, help_text='Whether email is verified for 2FA')),
                ('last_used', models.DateTimeField(blank=True, help_text='When 2FA was last used', null=True)),
                ('failed_attempts', models.PositiveIntegerField(default=0, help_text='Number of failed 2FA attempts')),
                ('locked_until', models.DateTimeField(blank=True, help_text='When 2FA was locked until', null=True)),
                ('hipaa_consent_given', models.BooleanField(default=False, help_text='Whether HIPAA consent has been given for 2FA')),
                ('consent_timestamp', models.DateTimeField(blank=True, help_text='When HIPAA consent was given', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='User associated with this 2FA configuration', on_delete=django.db.models.deletion.CASCADE, related_name='two_factor_auth', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Two-Factor Authentication',
                'verbose_name_plural': 'Two-Factor Authentications',
                'db_table': 'two_factor_auth',
                'permissions': [('view_two_factor_auth', 'Can view 2FA configuration'), ('change_two_factor_auth', 'Can change 2FA configuration'), ('delete_two_factor_auth', 'Can delete 2FA configuration'), ('enable_two_factor_auth', 'Can enable 2FA'), ('disable_two_factor_auth', 'Can disable 2FA')],
            },
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_hash', models.CharField(help_text='Hashed password', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this password was set')),
                ('user', models.ForeignKey(help_text='User whose password history this belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Password History',
                'verbose_name_plural': 'Password Histories',
                'db_table': 'password_history',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'created_at'], name='password_hi_user_id_f4f4ce_idx')],
            },
        ),
    ]
