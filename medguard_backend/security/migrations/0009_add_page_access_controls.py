# Generated by Django 5.2.4 on 2025-08-06 15:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('security', '0008_add_wagtail_audit_log'),
        ('wagtailcore', '0095_query_searchpromotion_querydailyhits'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PageAccessControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(choices=[('public', 'Public'), ('authenticated', 'Authenticated Users'), ('role_based', 'Role-Based Access'), ('patient_specific', 'Patient-Specific'), ('staff_only', 'Staff Only'), ('admin_only', 'Administrators Only'), ('emergency_only', 'Emergency Access Only')], default='authenticated', help_text='Type of access control for this page', max_length=30)),
                ('sensitivity_level', models.CharField(choices=[('low', 'Low Sensitivity'), ('medium', 'Medium Sensitivity'), ('high', 'High Sensitivity'), ('critical', 'Critical Sensitivity')], default='medium', help_text='Sensitivity level of the page content', max_length=20)),
                ('requires_consent', models.BooleanField(default=False, help_text='Whether patient consent is required to access this page')),
                ('requires_audit_logging', models.BooleanField(default=True, help_text='Whether access to this page should be audited')),
                ('requires_encryption', models.BooleanField(default=False, help_text='Whether page content should be encrypted')),
                ('patient_field', models.CharField(blank=True, help_text='Field name containing patient ID for patient-specific access', max_length=100)),
                ('emergency_access_enabled', models.BooleanField(default=False, help_text='Whether emergency access is allowed for this page')),
                ('access_hours_start', models.TimeField(blank=True, help_text='Start time for allowed access hours', null=True)),
                ('access_hours_end', models.TimeField(blank=True, help_text='End time for allowed access hours', null=True)),
                ('allowed_ip_ranges', models.JSONField(blank=True, default=list, help_text='List of allowed IP ranges for access')),
                ('max_access_duration', models.PositiveIntegerField(blank=True, help_text='Maximum duration in minutes for a single access session', null=True)),
                ('concurrent_access_limit', models.PositiveIntegerField(blank=True, help_text='Maximum number of concurrent users allowed', null=True)),
                ('allowed_roles', models.ManyToManyField(blank=True, help_text='Healthcare roles that can access this page', related_name='accessible_pages', to='security.healthcarerole')),
                ('emergency_access_roles', models.ManyToManyField(blank=True, help_text='Roles that can access this page in emergencies', related_name='emergency_accessible_pages', to='security.healthcarerole')),
                ('page', models.OneToOneField(help_text='Page to control access for', on_delete=django.db.models.deletion.CASCADE, related_name='access_control', to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Page Access Control',
                'verbose_name_plural': 'Page Access Controls',
                'db_table': 'page_access_controls',
                'ordering': ['page__title'],
                'permissions': [('manage_page_access', 'Can manage page access controls'), ('view_page_access_logs', 'Can view page access logs'), ('emergency_page_access', 'Can access pages in emergency mode')],
            },
        ),
        migrations.CreateModel(
            name='PageAccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_result', models.CharField(choices=[('granted', 'Access Granted'), ('denied', 'Access Denied'), ('emergency', 'Emergency Access'), ('expired', 'Access Expired'), ('suspended', 'Access Suspended')], help_text='Result of the access attempt', max_length=20)),
                ('access_reason', models.TextField(blank=True, help_text='Reason for the access attempt')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('session_id', models.CharField(blank=True, help_text='Session ID for the request', max_length=100)),
                ('patient_id', models.CharField(blank=True, help_text='Patient ID if the access involves patient data', max_length=100)),
                ('access_time', models.DateTimeField(auto_now_add=True, help_text='When the access attempt occurred')),
                ('session_duration', models.PositiveIntegerField(blank=True, help_text='Duration of the access session in seconds', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about the access attempt')),
                ('access_control', models.ForeignKey(help_text='Page access control that was accessed', on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='security.pageaccesscontrol')),
                ('user', models.ForeignKey(blank=True, help_text='User who attempted to access the page', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='page_access_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Page Access Log',
                'verbose_name_plural': 'Page Access Logs',
                'db_table': 'page_access_logs',
                'ordering': ['-access_time'],
                'permissions': [('view_access_logs', 'Can view access logs'), ('export_access_logs', 'Can export access logs'), ('anonymize_access_logs', 'Can anonymize access logs')],
                'indexes': [models.Index(fields=['access_control', 'access_time'], name='page_access_access__a81e83_idx'), models.Index(fields=['user', 'access_time'], name='page_access_user_id_820d26_idx'), models.Index(fields=['access_result', 'access_time'], name='page_access_access__a6d5c4_idx'), models.Index(fields=['patient_id', 'access_time'], name='page_access_patient_193482_idx'), models.Index(fields=['ip_address', 'access_time'], name='page_access_ip_addr_130977_idx'), models.Index(fields=['access_time'], name='page_access_access__591e4d_idx')],
            },
        ),
    ]
