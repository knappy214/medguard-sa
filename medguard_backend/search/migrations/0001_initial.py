# Generated by Django 5.2.4 on 2025-08-06 09:20

import django.db.models.deletion
import wagtail.search.index
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('medications', '0023_medicationindexpage_page_description'),
        ('wagtailcore', '0094_alter_page_locale'),
    ]

    operations = [
        migrations.CreateModel(
            name='EnhancedSearchIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Searchable title', max_length=255)),
                ('content', models.TextField(help_text='Searchable content')),
                ('content_type', models.CharField(help_text='Type of content', max_length=50)),
                ('object_id', models.PositiveIntegerField(help_text='ID of the indexed object')),
                ('medication_name', models.CharField(blank=True, help_text='Medication name', max_length=255)),
                ('generic_name', models.CharField(blank=True, help_text='Generic medication name', max_length=255)),
                ('active_ingredients', models.TextField(blank=True, help_text='Active ingredients')),
                ('side_effects', models.TextField(blank=True, help_text='Side effects')),
                ('interactions', models.TextField(blank=True, help_text='Drug interactions')),
                ('dosage_info', models.TextField(blank=True, help_text='Dosage information')),
                ('language', models.CharField(default='en-ZA', help_text='Content language', max_length=10)),
                ('relevance_score', models.FloatField(default=1.0, help_text='Search relevance score')),
                ('healthcare_relevance', models.FloatField(default=1.0, help_text='Healthcare-specific relevance')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last update time')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this index entry is active')),
            ],
            options={
                'verbose_name': 'Enhanced Search Index',
                'verbose_name_plural': 'Enhanced Search Indexes',
                'db_table': 'enhanced_search_index',
                'ordering': ['-relevance_score', '-healthcare_relevance'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='enhanced_se_content_f2c609_idx'), models.Index(fields=['language'], name='enhanced_se_languag_525407_idx'), models.Index(fields=['is_active'], name='enhanced_se_is_acti_7be8a0_idx'), models.Index(fields=['relevance_score'], name='enhanced_se_relevan_407ee1_idx'), models.Index(fields=['healthcare_relevance'], name='enhanced_se_healthc_447be7_idx')],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='MultilingualSearchIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(help_text='Type of content', max_length=50)),
                ('object_id', models.PositiveIntegerField(help_text='ID of the content object')),
                ('language', models.CharField(choices=[('en-ZA', 'English (South Africa)'), ('af-ZA', 'Afrikaans (South Africa)')], help_text='Language of the content', max_length=10)),
                ('title', models.CharField(help_text='Translated title', max_length=255)),
                ('content', models.TextField(help_text='Translated content')),
                ('keywords', models.TextField(blank=True, help_text='Translated keywords')),
                ('medication_name', models.CharField(blank=True, help_text='Translated medication name', max_length=255)),
                ('generic_name', models.CharField(blank=True, help_text='Translated generic name', max_length=255)),
                ('active_ingredients', models.TextField(blank=True, help_text='Translated active ingredients')),
                ('side_effects', models.TextField(blank=True, help_text='Translated side effects')),
                ('interactions', models.TextField(blank=True, help_text='Translated drug interactions')),
                ('dosage_info', models.TextField(blank=True, help_text='Translated dosage information')),
                ('is_auto_translated', models.BooleanField(default=False, help_text='Whether this content was auto-translated')),
                ('translation_confidence', models.FloatField(default=1.0, help_text='Confidence score for translation quality (0-1)')),
                ('original_language', models.CharField(choices=[('en-ZA', 'English (South Africa)'), ('af-ZA', 'Afrikaans (South Africa)')], help_text='Original language of the content', max_length=10)),
                ('relevance_score', models.FloatField(default=1.0, help_text='Language-specific relevance score')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_translated', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Multilingual Search Index',
                'verbose_name_plural': 'Multilingual Search Indexes',
                'db_table': 'multilingual_search_index',
                'ordering': ['-relevance_score', '-updated_at'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='multilingua_content_e59263_idx'), models.Index(fields=['language'], name='multilingua_languag_a63674_idx'), models.Index(fields=['original_language'], name='multilingua_origina_9d2374_idx'), models.Index(fields=['relevance_score'], name='multilingua_relevan_4c4441_idx'), models.Index(fields=['is_auto_translated'], name='multilingua_is_auto_6b5e67_idx')],
                'unique_together': {('content_type', 'object_id', 'language')},
            },
        ),
        migrations.CreateModel(
            name='SearchAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analytics_type', models.CharField(choices=[('search_query', 'Search Query'), ('search_result', 'Search Result'), ('user_behavior', 'User Behavior'), ('performance', 'Performance'), ('error', 'Error')], help_text='Type of analytics event', max_length=20)),
                ('event_name', models.CharField(help_text='Name of the analytics event', max_length=100)),
                ('search_query', models.CharField(blank=True, help_text='Search query that triggered this event', max_length=255)),
                ('search_results_count', models.PositiveIntegerField(default=0, help_text='Number of search results returned')),
                ('user_id', models.PositiveIntegerField(blank=True, help_text='ID of the user who triggered this event', null=True)),
                ('session_id', models.CharField(blank=True, help_text='Session ID for tracking user sessions', max_length=100)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('content_type', models.CharField(blank=True, help_text='Type of content involved', max_length=50)),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='ID of the content object involved', null=True)),
                ('applied_filters', models.JSONField(default=dict, help_text='Filters applied to the search')),
                ('selected_facets', models.JSONField(default=dict, help_text='Facets selected by the user')),
                ('clicked_result', models.BooleanField(default=False, help_text='Whether user clicked on a search result')),
                ('clicked_result_id', models.PositiveIntegerField(blank=True, help_text='ID of the clicked result', null=True)),
                ('time_on_page', models.PositiveIntegerField(blank=True, help_text='Time spent on page in seconds', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if applicable')),
                ('error_code', models.CharField(blank=True, help_text='Error code if applicable', max_length=50)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user', null=True)),
                ('referrer', models.URLField(blank=True, help_text='Referrer URL')),
                ('language', models.CharField(default='en-ZA', help_text='Language of the search', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this analytics event occurred')),
            ],
            options={
                'verbose_name': 'Search Analytics',
                'verbose_name_plural': 'Search Analytics',
                'db_table': 'search_analytics',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['analytics_type'], name='search_anal_analyti_ed0afc_idx'), models.Index(fields=['event_name'], name='search_anal_event_n_5c8024_idx'), models.Index(fields=['search_query'], name='search_anal_search__75c69f_idx'), models.Index(fields=['user_id'], name='search_anal_user_id_20bbf7_idx'), models.Index(fields=['session_id'], name='search_anal_session_d8fc09_idx'), models.Index(fields=['content_type', 'object_id'], name='search_anal_content_70533a_idx'), models.Index(fields=['created_at'], name='search_anal_created_b2167e_idx'), models.Index(fields=['language'], name='search_anal_languag_e2ca54_idx')],
            },
        ),
        migrations.CreateModel(
            name='SearchFacet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Facet name', max_length=100)),
                ('facet_type', models.CharField(choices=[('medication_type', 'Medication Type'), ('prescription_type', 'Prescription Type'), ('manufacturer', 'Manufacturer'), ('active_ingredient', 'Active Ingredient'), ('side_effect', 'Side Effect'), ('interaction_type', 'Interaction Type'), ('dosage_form', 'Dosage Form'), ('category', 'Category'), ('price_range', 'Price Range'), ('availability', 'Availability')], help_text='Type of facet', max_length=30)),
                ('value', models.CharField(help_text='Facet value', max_length=255)),
                ('display_name', models.CharField(help_text='Display name for the facet', max_length=255)),
                ('count', models.PositiveIntegerField(default=0, help_text='Number of items matching this facet')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this facet was used in searches')),
                ('sort_order', models.IntegerField(default=0, help_text='Sort order for display')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this facet is active')),
                ('language', models.CharField(default='en-ZA', help_text='Language for this facet', max_length=10)),
                ('description', models.TextField(blank=True, help_text='Description of this facet')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Search Facet',
                'verbose_name_plural': 'Search Facets',
                'db_table': 'search_facets',
                'ordering': ['facet_type', 'sort_order', 'display_name'],
                'indexes': [models.Index(fields=['facet_type'], name='search_face_facet_t_ae37b7_idx'), models.Index(fields=['language'], name='search_face_languag_6d78c7_idx'), models.Index(fields=['is_active'], name='search_face_is_acti_6655e4_idx'), models.Index(fields=['sort_order'], name='search_face_sort_or_1bfce6_idx'), models.Index(fields=['count'], name='search_face_count_dffb01_idx'), models.Index(fields=['facet_type', 'value'], name='search_face_facet_t_3874f7_idx')],
                'unique_together': {('facet_type', 'value', 'language')},
            },
        ),
        migrations.CreateModel(
            name='SearchFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Filter name', max_length=100)),
                ('field_name', models.CharField(help_text='Database field to filter on', max_length=100)),
                ('filter_type', models.CharField(choices=[('exact_match', 'Exact Match'), ('contains', 'Contains'), ('starts_with', 'Starts With'), ('ends_with', 'Ends With'), ('range', 'Range'), ('boolean', 'Boolean'), ('multiple_choice', 'Multiple Choice'), ('date_range', 'Date Range')], help_text='Type of filter', max_length=20)),
                ('filter_value', models.TextField(help_text='Filter value or configuration')),
                ('display_name', models.CharField(help_text='Display name for the filter', max_length=255)),
                ('is_required', models.BooleanField(default=False, help_text='Whether this filter is required')),
                ('is_multiple', models.BooleanField(default=False, help_text='Whether multiple values can be selected')),
                ('default_value', models.TextField(blank=True, help_text='Default value for this filter')),
                ('validation_regex', models.CharField(blank=True, help_text='Regular expression for validation', max_length=255)),
                ('min_value', models.CharField(blank=True, help_text='Minimum value for range filters', max_length=100)),
                ('max_value', models.CharField(blank=True, help_text='Maximum value for range filters', max_length=100)),
                ('sort_order', models.IntegerField(default=0, help_text='Sort order for display')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this filter is active')),
                ('language', models.CharField(default='en-ZA', help_text='Language for this filter', max_length=10)),
                ('description', models.TextField(blank=True, help_text='Description of this filter')),
                ('help_text', models.TextField(blank=True, help_text='Help text for users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Search Filter',
                'verbose_name_plural': 'Search Filters',
                'db_table': 'search_filters',
                'ordering': ['sort_order', 'name'],
                'indexes': [models.Index(fields=['field_name'], name='search_filt_field_n_cb3a96_idx'), models.Index(fields=['filter_type'], name='search_filt_filter__ed19b1_idx'), models.Index(fields=['language'], name='search_filt_languag_c3b0fc_idx'), models.Index(fields=['is_active'], name='search_filt_is_acti_e69ad4_idx'), models.Index(fields=['sort_order'], name='search_filt_sort_or_4db735_idx')],
                'unique_together': {('field_name', 'language')},
            },
        ),
        migrations.CreateModel(
            name='SearchHealthMonitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitor_type', models.CharField(choices=[('search_performance', 'Search Performance'), ('cache_health', 'Cache Health'), ('database_health', 'Database Health'), ('index_health', 'Index Health'), ('system_resources', 'System Resources')], help_text='Type of health monitor', max_length=30)),
                ('health_status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('offline', 'Offline')], default='healthy', help_text='Current health status', max_length=20)),
                ('response_time_ms', models.FloatField(blank=True, help_text='Average response time in milliseconds', null=True)),
                ('error_rate', models.FloatField(default=0.0, help_text='Error rate as percentage')),
                ('throughput', models.FloatField(blank=True, help_text='Requests per second', null=True)),
                ('cpu_usage', models.FloatField(blank=True, help_text='CPU usage percentage', null=True)),
                ('memory_usage', models.FloatField(blank=True, help_text='Memory usage percentage', null=True)),
                ('disk_usage', models.FloatField(blank=True, help_text='Disk usage percentage', null=True)),
                ('last_check', models.DateTimeField(blank=True, help_text='When the last health check was performed', null=True)),
                ('check_interval', models.PositiveIntegerField(default=300, help_text='Health check interval in seconds')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this monitor is active')),
                ('enable_alerts', models.BooleanField(default=True, help_text='Whether to enable health alerts')),
                ('alert_threshold', models.FloatField(default=80.0, help_text='Alert threshold percentage')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Search Health Monitor',
                'verbose_name_plural': 'Search Health Monitors',
                'db_table': 'search_health_monitor',
                'ordering': ['monitor_type', '-last_check'],
                'indexes': [models.Index(fields=['monitor_type'], name='search_heal_monitor_9e1d25_idx'), models.Index(fields=['health_status'], name='search_heal_health__d8222a_idx'), models.Index(fields=['is_active'], name='search_heal_is_acti_c4bb70_idx'), models.Index(fields=['last_check'], name='search_heal_last_ch_f31b81_idx')],
                'unique_together': {('monitor_type',)},
            },
        ),
        migrations.CreateModel(
            name='SearchPagination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pagination_type', models.CharField(choices=[('standard', 'Standard Pagination'), ('infinite_scroll', 'Infinite Scroll'), ('load_more', 'Load More Button'), ('cursor_based', 'Cursor-based Pagination'), ('offset_based', 'Offset-based Pagination')], default='standard', help_text='Type of pagination to use', max_length=20)),
                ('items_per_page', models.PositiveIntegerField(default=10, help_text='Number of items per page')),
                ('max_pages', models.PositiveIntegerField(default=100, help_text='Maximum number of pages to show')),
                ('show_first_last', models.BooleanField(default=True, help_text='Whether to show first/last page links')),
                ('show_prev_next', models.BooleanField(default=True, help_text='Whether to show previous/next links')),
                ('cache_results', models.BooleanField(default=True, help_text='Whether to cache paginated results')),
                ('cache_timeout', models.PositiveIntegerField(default=300, help_text='Cache timeout in seconds')),
                ('show_page_numbers', models.BooleanField(default=True, help_text='Whether to show page numbers')),
                ('show_item_count', models.BooleanField(default=True, help_text='Whether to show total item count')),
                ('show_loading_indicator', models.BooleanField(default=True, help_text='Whether to show loading indicator')),
                ('language', models.CharField(default='en-ZA', help_text='Language for pagination labels', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Search Pagination',
                'verbose_name_plural': 'Search Pagination Settings',
                'db_table': 'search_pagination',
                'ordering': ['pagination_type', 'items_per_page'],
                'indexes': [models.Index(fields=['pagination_type'], name='search_pagi_paginat_67a72d_idx'), models.Index(fields=['language'], name='search_pagi_languag_e93b9f_idx')],
            },
        ),
        migrations.CreateModel(
            name='SearchPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_response_time_ms', models.FloatField(help_text='Average response time in milliseconds')),
                ('max_response_time_ms', models.FloatField(help_text='Maximum response time in milliseconds')),
                ('min_response_time_ms', models.FloatField(help_text='Minimum response time in milliseconds')),
                ('requests_per_minute', models.FloatField(help_text='Requests per minute')),
                ('requests_per_hour', models.FloatField(help_text='Requests per hour')),
                ('error_rate', models.FloatField(help_text='Error rate as percentage')),
                ('total_errors', models.PositiveIntegerField(help_text='Total number of errors')),
                ('total_requests', models.PositiveIntegerField(help_text='Total number of requests')),
                ('cache_hit_rate', models.FloatField(help_text='Cache hit rate as percentage')),
                ('cache_misses', models.PositiveIntegerField(help_text='Number of cache misses')),
                ('cache_hits', models.PositiveIntegerField(help_text='Number of cache hits')),
                ('memory_usage_mb', models.FloatField(help_text='Memory usage in MB')),
                ('cpu_usage_percent', models.FloatField(help_text='CPU usage percentage')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, help_text='When these metrics were recorded')),
            ],
            options={
                'verbose_name': 'Search Performance',
                'verbose_name_plural': 'Search Performance Metrics',
                'db_table': 'search_performance',
                'ordering': ['-recorded_at'],
                'indexes': [models.Index(fields=['recorded_at'], name='search_perf_recorde_028567_idx')],
            },
        ),
        migrations.CreateModel(
            name='SearchPerformanceOptimizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('optimization_type', models.CharField(choices=[('query_optimization', 'Query Optimization'), ('result_caching', 'Result Caching'), ('index_optimization', 'Index Optimization'), ('database_optimization', 'Database Optimization'), ('cache_optimization', 'Cache Optimization')], help_text='Type of optimization', max_length=30)),
                ('enable_query_cache', models.BooleanField(default=True, help_text='Whether to enable query result caching')),
                ('enable_result_cache', models.BooleanField(default=True, help_text='Whether to enable search result caching')),
                ('enable_autocomplete_cache', models.BooleanField(default=True, help_text='Whether to enable autocomplete caching')),
                ('query_cache_timeout', models.PositiveIntegerField(default=300, help_text='Query cache timeout in seconds')),
                ('result_cache_timeout', models.PositiveIntegerField(default=600, help_text='Result cache timeout in seconds')),
                ('autocomplete_cache_timeout', models.PositiveIntegerField(default=1800, help_text='Autocomplete cache timeout in seconds')),
                ('enable_query_optimization', models.BooleanField(default=True, help_text='Whether to enable database query optimization')),
                ('max_query_time', models.PositiveIntegerField(default=5000, help_text='Maximum query execution time in milliseconds')),
                ('enable_slow_query_logging', models.BooleanField(default=True, help_text='Whether to log slow queries')),
                ('enable_index_optimization', models.BooleanField(default=True, help_text='Whether to enable search index optimization')),
                ('index_update_frequency', models.PositiveIntegerField(default=3600, help_text='Index update frequency in seconds')),
                ('enable_performance_monitoring', models.BooleanField(default=True, help_text='Whether to enable performance monitoring')),
                ('monitoring_interval', models.PositiveIntegerField(default=300, help_text='Performance monitoring interval in seconds')),
                ('language', models.CharField(default='en-ZA', help_text='Language for optimization settings', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_optimized', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Search Performance Optimizer',
                'verbose_name_plural': 'Search Performance Optimizers',
                'db_table': 'search_performance_optimizer',
                'ordering': ['optimization_type', 'language'],
                'indexes': [models.Index(fields=['optimization_type'], name='search_perf_optimiz_44a7ee_idx'), models.Index(fields=['language'], name='search_perf_languag_8e87e8_idx'), models.Index(fields=['last_optimized'], name='search_perf_last_op_4f9553_idx')],
                'unique_together': {('optimization_type', 'language')},
            },
        ),
        migrations.CreateModel(
            name='SearchRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(help_text='Type of content being ranked', max_length=50)),
                ('object_id', models.PositiveIntegerField(help_text='ID of the ranked object')),
                ('base_score', models.FloatField(default=1.0, help_text='Base relevance score')),
                ('healthcare_score', models.FloatField(default=1.0, help_text='Healthcare-specific relevance')),
                ('popularity_score', models.FloatField(default=1.0, help_text='Popularity-based score')),
                ('recency_score', models.FloatField(default=1.0, help_text='Recency-based score')),
                ('completeness_score', models.FloatField(default=1.0, help_text='Content completeness score')),
                ('accuracy_score', models.FloatField(default=1.0, help_text='Information accuracy score')),
                ('weighted_score', models.FloatField(default=1.0, help_text='Weighted combination of all scores')),
                ('final_rank', models.PositiveIntegerField(default=1, help_text='Final ranking position')),
                ('medication_name_score', models.FloatField(default=1.0, help_text='Medication name match score')),
                ('generic_name_score', models.FloatField(default=1.0, help_text='Generic name match score')),
                ('active_ingredient_score', models.FloatField(default=1.0, help_text='Active ingredient match score')),
                ('side_effect_score', models.FloatField(default=1.0, help_text='Side effect relevance score')),
                ('interaction_score', models.FloatField(default=1.0, help_text='Drug interaction relevance score')),
                ('dosage_score', models.FloatField(default=1.0, help_text='Dosage information score')),
                ('search_count', models.PositiveIntegerField(default=0, help_text='Number of times this item was searched')),
                ('click_count', models.PositiveIntegerField(default=0, help_text='Number of times this item was clicked')),
                ('conversion_count', models.PositiveIntegerField(default=0, help_text='Number of conversions from this item')),
                ('last_calculated', models.DateTimeField(auto_now=True, help_text='When ranking was last calculated')),
                ('last_searched', models.DateTimeField(blank=True, help_text='When this item was last searched', null=True)),
            ],
            options={
                'verbose_name': 'Search Ranking',
                'verbose_name_plural': 'Search Rankings',
                'db_table': 'search_rankings',
                'ordering': ['-weighted_score', '-healthcare_score'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='search_rank_content_277a7e_idx'), models.Index(fields=['weighted_score'], name='search_rank_weighte_d313b6_idx'), models.Index(fields=['final_rank'], name='search_rank_final_r_e80fdd_idx'), models.Index(fields=['healthcare_score'], name='search_rank_healthc_0a75d1_idx'), models.Index(fields=['search_count'], name='search_rank_search__a3237f_idx')],
                'unique_together': {('content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='SearchResultCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_key', models.CharField(help_text='Unique cache key', max_length=255)),
                ('cache_type', models.CharField(choices=[('search_results', 'Search Results'), ('facet_results', 'Facet Results'), ('autocomplete_results', 'Autocomplete Results'), ('suggestion_results', 'Suggestion Results')], help_text='Type of cached data', max_length=30)),
                ('cached_data', models.JSONField(help_text='Cached data in JSON format')),
                ('search_query', models.CharField(blank=True, help_text='Original search query', max_length=255)),
                ('filters_applied', models.JSONField(default=dict, help_text='Filters applied to the search')),
                ('facets_selected', models.JSONField(default=dict, help_text='Facets selected for the search')),
                ('hit_count', models.PositiveIntegerField(default=0, help_text='Number of times this cache was hit')),
                ('last_accessed', models.DateTimeField(blank=True, help_text='When this cache was last accessed', null=True)),
                ('expires_at', models.DateTimeField(help_text='When this cache expires')),
                ('language', models.CharField(default='en-ZA', help_text='Language of the cached data', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Search Result Cache',
                'verbose_name_plural': 'Search Result Caches',
                'db_table': 'search_result_cache',
                'ordering': ['-hit_count', '-last_accessed'],
                'indexes': [models.Index(fields=['cache_key'], name='search_resu_cache_k_b5ea14_idx'), models.Index(fields=['cache_type'], name='search_resu_cache_t_4c32a8_idx'), models.Index(fields=['search_query'], name='search_resu_search__ed975f_idx'), models.Index(fields=['language'], name='search_resu_languag_a36f2e_idx'), models.Index(fields=['expires_at'], name='search_resu_expires_7b6c99_idx'), models.Index(fields=['hit_count'], name='search_resu_hit_cou_caffd4_idx')],
                'unique_together': {('cache_key', 'language')},
            },
        ),
        migrations.CreateModel(
            name='SearchResultTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name', max_length=100)),
                ('template_type', models.CharField(choices=[('medication_detail', 'Medication Detail'), ('medication_list', 'Medication List'), ('side_effects', 'Side Effects'), ('drug_interactions', 'Drug Interactions'), ('dosage_info', 'Dosage Information'), ('generic_alternatives', 'Generic Alternatives'), ('safety_alerts', 'Safety Alerts')], help_text='Type of template', max_length=30)),
                ('template_path', models.CharField(help_text='Path to the template file', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of when this template should be used')),
                ('show_medication_image', models.BooleanField(default=True, help_text='Whether to show medication image in results')),
                ('show_side_effects', models.BooleanField(default=True, help_text='Whether to show side effects in results')),
                ('show_interactions', models.BooleanField(default=True, help_text='Whether to show drug interactions in results')),
                ('show_dosage_info', models.BooleanField(default=True, help_text='Whether to show dosage information in results')),
                ('show_generic_alternatives', models.BooleanField(default=False, help_text='Whether to show generic alternatives in results')),
                ('css_class', models.CharField(blank=True, help_text='CSS class for styling this template', max_length=100)),
                ('priority', models.IntegerField(default=1, help_text='Priority for template selection (higher = more important)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is active')),
                ('language', models.CharField(default='en-ZA', help_text='Language for this template', max_length=10)),
            ],
            options={
                'verbose_name': 'Search Result Template',
                'verbose_name_plural': 'Search Result Templates',
                'db_table': 'search_result_templates',
                'ordering': ['-priority', 'name'],
                'indexes': [models.Index(fields=['template_type'], name='search_resu_templat_d76b91_idx'), models.Index(fields=['priority'], name='search_resu_priorit_a06f14_idx'), models.Index(fields=['is_active'], name='search_resu_is_acti_01f248_idx'), models.Index(fields=['language'], name='search_resu_languag_4d94e0_idx')],
            },
        ),
        migrations.CreateModel(
            name='SearchSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_query', models.CharField(help_text='Original search query', max_length=255)),
                ('suggested_query', models.CharField(help_text='Suggested search query', max_length=255)),
                ('suggestion_type', models.CharField(choices=[('spelling_correction', 'Spelling Correction'), ('synonym', 'Synonym'), ('related_term', 'Related Term'), ('popular_search', 'Popular Search'), ('category_suggestion', 'Category Suggestion')], help_text='Type of suggestion', max_length=30)),
                ('confidence_score', models.FloatField(default=1.0, help_text='Confidence score for this suggestion (0-1)')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this suggestion was used')),
                ('context', models.TextField(blank=True, help_text='Context information for this suggestion')),
                ('language', models.CharField(default='en-ZA', help_text='Language for this suggestion', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this suggestion is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Search Suggestion',
                'verbose_name_plural': 'Search Suggestions',
                'db_table': 'search_suggestions',
                'ordering': ['-confidence_score', '-usage_count'],
                'indexes': [models.Index(fields=['original_query'], name='search_sugg_origina_df0126_idx'), models.Index(fields=['suggestion_type'], name='search_sugg_suggest_f2d3cf_idx'), models.Index(fields=['language'], name='search_sugg_languag_14493f_idx'), models.Index(fields=['is_active'], name='search_sugg_is_acti_48e3f9_idx'), models.Index(fields=['confidence_score'], name='search_sugg_confide_05b2a6_idx')],
                'unique_together': {('original_query', 'suggested_query', 'language')},
            },
        ),
        migrations.CreateModel(
            name='SearchTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_language', models.CharField(help_text='Source language', max_length=10)),
                ('target_language', models.CharField(help_text='Target language', max_length=10)),
                ('translation_type', models.CharField(choices=[('medication_name', 'Medication Name'), ('generic_name', 'Generic Name'), ('active_ingredient', 'Active Ingredient'), ('side_effect', 'Side Effect'), ('drug_interaction', 'Drug Interaction'), ('dosage_info', 'Dosage Information'), ('category', 'Category'), ('warning', 'Warning'), ('instruction', 'Instruction')], help_text='Type of translation', max_length=30)),
                ('source_text', models.TextField(help_text='Source text to translate')),
                ('target_text', models.TextField(help_text='Translated text')),
                ('confidence_score', models.FloatField(default=1.0, help_text='Confidence score for translation quality (0-1)')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this translation was used')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether this translation has been approved')),
                ('approved_by', models.PositiveIntegerField(blank=True, help_text='ID of user who approved this translation', null=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='When this translation was approved', null=True)),
                ('context', models.TextField(blank=True, help_text='Context information for the translation')),
                ('notes', models.TextField(blank=True, help_text='Notes about the translation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Search Translation',
                'verbose_name_plural': 'Search Translations',
                'db_table': 'search_translations',
                'ordering': ['-confidence_score', '-usage_count'],
                'indexes': [models.Index(fields=['source_language', 'target_language'], name='search_tran_source__2ba154_idx'), models.Index(fields=['translation_type'], name='search_tran_transla_96c808_idx'), models.Index(fields=['confidence_score'], name='search_tran_confide_0fa211_idx'), models.Index(fields=['is_approved'], name='search_tran_is_appr_f9360a_idx'), models.Index(fields=['usage_count'], name='search_tran_usage_c_028098_idx')],
                'unique_together': {('source_language', 'target_language', 'translation_type', 'source_text')},
            },
        ),
        migrations.CreateModel(
            name='MedicationAutocomplete',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggestion', models.CharField(help_text='Autocomplete suggestion', max_length=255)),
                ('suggestion_type', models.CharField(choices=[('medication_name', 'Medication Name'), ('generic_name', 'Generic Name'), ('active_ingredient', 'Active Ingredient'), ('brand_name', 'Brand Name'), ('manufacturer', 'Manufacturer'), ('category', 'Category')], help_text='Type of suggestion', max_length=20)),
                ('frequency', models.PositiveIntegerField(default=1, help_text='How often this suggestion is used')),
                ('relevance_score', models.FloatField(default=1.0, help_text='Relevance score for ranking')),
                ('search_count', models.PositiveIntegerField(default=0, help_text='Number of times this suggestion was searched')),
                ('last_searched', models.DateTimeField(blank=True, help_text='When this suggestion was last searched', null=True)),
                ('language', models.CharField(default='en-ZA', help_text='Language for this suggestion', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this suggestion is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('medication', models.ForeignKey(help_text='Associated medication', on_delete=django.db.models.deletion.CASCADE, related_name='autocomplete_suggestions', to='medications.medication')),
            ],
            options={
                'verbose_name': 'Medication Autocomplete',
                'verbose_name_plural': 'Medication Autocomplete Suggestions',
                'db_table': 'medication_autocomplete',
                'ordering': ['-relevance_score', '-frequency', 'suggestion'],
                'indexes': [models.Index(fields=['suggestion_type'], name='medication__suggest_342a6f_idx'), models.Index(fields=['language'], name='medication__languag_40bb0f_idx'), models.Index(fields=['is_active'], name='medication__is_acti_e1bf51_idx'), models.Index(fields=['relevance_score'], name='medication__relevan_b86622_idx'), models.Index(fields=['frequency'], name='medication__frequen_498f47_idx'), models.Index(fields=['suggestion', 'suggestion_type'], name='medication__suggest_ad213b_idx')],
                'unique_together': {('suggestion', 'suggestion_type', 'medication', 'language')},
            },
        ),
        migrations.CreateModel(
            name='MedicationSearchPromotion',
            fields=[
                ('searchpromotion_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.searchpromotion')),
                ('promotion_type', models.CharField(choices=[('featured_medication', 'Featured Medication'), ('new_medication', 'New Medication'), ('popular_medication', 'Popular Medication'), ('safety_alert', 'Safety Alert'), ('drug_recall', 'Drug Recall'), ('generic_available', 'Generic Available')], default='featured_medication', help_text='Type of search promotion', max_length=30)),
                ('priority_score', models.IntegerField(default=1, help_text='Priority score for promotion ranking (higher = more important)')),
                ('start_date', models.DateTimeField(blank=True, help_text='When this promotion should start appearing', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='When this promotion should stop appearing', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this promotion is currently active')),
                ('language', models.CharField(default='en-ZA', help_text='Language for this promotion', max_length=10)),
                ('medication', models.ForeignKey(blank=True, help_text='Associated medication for this promotion', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='search_promotions', to='medications.medication')),
            ],
            options={
                'verbose_name': 'Medication Search Promotion',
                'verbose_name_plural': 'Medication Search Promotions',
                'db_table': 'medication_search_promotions',
                'ordering': ['-priority_score', '-start_date'],
                'indexes': [models.Index(fields=['promotion_type'], name='medication__promoti_34f625_idx'), models.Index(fields=['priority_score'], name='medication__priorit_64c29c_idx'), models.Index(fields=['is_active'], name='medication__is_acti_1818a0_idx'), models.Index(fields=['language'], name='medication__languag_184f2a_idx'), models.Index(fields=['start_date', 'end_date'], name='medication__start_d_6d93cc_idx')],
            },
            bases=('wagtailcore.searchpromotion',),
        ),
    ]
