# Generated by Django 5.2.4 on 2025-08-06 10:27

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import wagtail.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('medications', '0024_activeingredient_dosageform_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EnhancedPrescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_number', models.CharField(help_text='Unique prescription number', max_length=100, unique=True)),
                ('prescribed_date', models.DateField(default=django.utils.timezone.now, help_text='Date when prescription was issued')),
                ('expiry_date', models.DateField(help_text='Date when prescription expires')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('dispensed', 'Dispensed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='draft', help_text='Current status of the prescription', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='normal', help_text='Priority level of the prescription', max_length=20)),
                ('dosage_instructions', wagtail.fields.RichTextField(help_text='Detailed dosage instructions')),
                ('dosage_amount', models.DecimalField(decimal_places=2, help_text='Amount of medication to take', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('dosage_unit', models.CharField(help_text='Unit of dosage (e.g., mg, ml, tablets)', max_length=20)),
                ('frequency', models.CharField(help_text='How often to take the medication', max_length=100)),
                ('duration', models.CharField(help_text='Duration of treatment', max_length=100)),
                ('quantity_prescribed', models.PositiveIntegerField(help_text='Quantity prescribed')),
                ('refills_allowed', models.PositiveIntegerField(default=0, help_text='Number of refills allowed')),
                ('refills_used', models.PositiveIntegerField(default=0, help_text='Number of refills already used')),
                ('diagnosis', models.TextField(blank=True, help_text='Diagnosis or reason for prescription')),
                ('allergies', models.TextField(blank=True, help_text='Known allergies or contraindications')),
                ('special_instructions', wagtail.fields.RichTextField(blank=True, help_text='Special instructions for the patient')),
                ('prescriber_notes', wagtail.fields.RichTextField(blank=True, help_text='Private notes from the prescriber')),
                ('approved_date', models.DateTimeField(blank=True, help_text='When the prescription was approved', null=True)),
                ('dispensed_date', models.DateTimeField(blank=True, help_text='When the medication was dispensed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this prescription was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this prescription was last updated')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved the prescription', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_prescriptions', to=settings.AUTH_USER_MODEL)),
                ('dispensed_by', models.ForeignKey(blank=True, help_text='User who dispensed the medication', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispensed_prescriptions', to=settings.AUTH_USER_MODEL)),
                ('medication', models.ForeignKey(help_text='Prescribed medication', on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='medications.medication')),
                ('patient', models.ForeignKey(help_text='Patient for this prescription', limit_choices_to={'user_type': 'PATIENT'}, on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to=settings.AUTH_USER_MODEL)),
                ('prescriber', models.ForeignKey(help_text='Healthcare provider who prescribed the medication', limit_choices_to={'user_type__in': ['DOCTOR', 'PHARMACIST', 'NURSE']}, on_delete=django.db.models.deletion.CASCADE, related_name='prescribed_medications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enhanced Prescription',
                'verbose_name_plural': 'Enhanced Prescriptions',
                'db_table': 'medications_enhanced_prescription',
                'ordering': ['-prescribed_date'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionWorkflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_status', models.CharField(choices=[('created', 'Created'), ('under_review', 'Under Review'), ('pharmacy_review', 'Pharmacy Review'), ('approved', 'Approved'), ('dispensed', 'Dispensed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold'), ('requires_clarification', 'Requires Clarification')], default='created', help_text='Current workflow status', max_length=30)),
                ('current_step', models.CharField(choices=[('initial_review', 'Initial Review'), ('pharmacy_verification', 'Pharmacy Verification'), ('insurance_verification', 'Insurance Verification'), ('clinical_review', 'Clinical Review'), ('dispensing', 'Dispensing'), ('patient_education', 'Patient Education'), ('follow_up', 'Follow-up')], default='initial_review', help_text='Current workflow step', max_length=30)),
                ('workflow_history', wagtail.fields.StreamField([('status_change', 5), ('review_notes', 2), ('verification_result', 7), ('clinical_decision', 9)], blank=True, block_lookup={0: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('created', 'Created'), ('under_review', 'Under Review'), ('pharmacy_review', 'Pharmacy Review'), ('approved', 'Approved'), ('dispensed', 'Dispensed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold'), ('requires_clarification', 'Requires Clarification')]}), 1: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('initial_review', 'Initial Review'), ('pharmacy_verification', 'Pharmacy Verification'), ('insurance_verification', 'Insurance Verification'), ('clinical_review', 'Clinical Review'), ('dispensing', 'Dispensing'), ('patient_education', 'Patient Education'), ('follow_up', 'Follow-up')]}), 2: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol']}), 3: ('wagtail.blocks.DateTimeBlock', (), {}), 4: ('wagtail.snippets.blocks.SnippetChooserBlock', ('users.User',), {}), 5: ('wagtail.blocks.StructBlock', [[('status', 0), ('step', 1), ('notes', 2), ('timestamp', 3), ('user', 4)]], {}), 6: ('wagtail.blocks.BooleanBlock', (), {}), 7: ('wagtail.blocks.StructBlock', [[('verified', 6), ('notes', 2), ('verifier', 4), ('timestamp', 3)]], {}), 8: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('approve', 'Approve'), ('reject', 'Reject'), ('modify', 'Modify'), ('hold', 'Hold')]}), 9: ('wagtail.blocks.StructBlock', [[('decision', 8), ('reasoning', 2), ('clinician', 4), ('timestamp', 3)]], {})}, help_text='Complete workflow history')),
                ('priority_level', models.CharField(choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('emergency', 'Emergency'), ('stat', 'STAT')], default='routine', help_text='Priority level for processing', max_length=20)),
                ('estimated_completion_time', models.DurationField(blank=True, help_text='Estimated time to complete workflow', null=True)),
                ('actual_completion_time', models.DurationField(blank=True, help_text='Actual time taken to complete workflow', null=True)),
                ('quality_check_passed', models.BooleanField(default=False, help_text='Whether quality assurance checks passed')),
                ('quality_check_notes', wagtail.fields.RichTextField(blank=True, help_text='Quality assurance notes')),
                ('quality_check_date', models.DateTimeField(blank=True, help_text='When quality check was performed', null=True)),
                ('compliance_verified', models.BooleanField(default=False, help_text='Whether compliance requirements are met')),
                ('compliance_notes', wagtail.fields.RichTextField(blank=True, help_text='Compliance verification notes')),
                ('audit_trail', models.JSONField(blank=True, default=list, help_text='Audit trail for compliance tracking')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('prescription', models.OneToOneField(help_text='Associated prescription', on_delete=django.db.models.deletion.CASCADE, related_name='workflow', to='medications.enhancedprescription')),
                ('quality_checker', models.ForeignKey(blank=True, help_text='User who performed quality check', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quality_checked_workflows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Prescription Workflow',
                'verbose_name_plural': 'Prescription Workflows',
                'db_table': 'prescription_workflows',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='enhancedprescription',
            index=models.Index(fields=['prescription_number'], name='medications_prescri_dd6ec2_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedprescription',
            index=models.Index(fields=['patient', 'status'], name='medications_patient_2d0e0d_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedprescription',
            index=models.Index(fields=['prescriber', 'status'], name='medications_prescri_1b007f_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedprescription',
            index=models.Index(fields=['medication', 'status'], name='medications_medicat_e7da6d_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedprescription',
            index=models.Index(fields=['prescribed_date'], name='medications_prescri_1ede01_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedprescription',
            index=models.Index(fields=['expiry_date'], name='medications_expiry__d49f4d_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedprescription',
            index=models.Index(fields=['status', 'priority'], name='medications_status_57e363_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionworkflow',
            index=models.Index(fields=['current_status', 'priority_level'], name='prescriptio_current_5b5390_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionworkflow',
            index=models.Index(fields=['current_step', 'created_at'], name='prescriptio_current_a75123_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionworkflow',
            index=models.Index(fields=['quality_check_passed', 'compliance_verified'], name='prescriptio_quality_739ea4_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionworkflow',
            index=models.Index(fields=['created_at'], name='prescriptio_created_1fffe8_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionworkflow',
            index=models.Index(fields=['completed_at'], name='prescriptio_complet_3d5b84_idx'),
        ),
    ]
