# Generated by Django 5.2.4 on 2025-08-06 07:24

import django.core.validators
import wagtail.fields
from decimal import Decimal
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('medications', '0021_enhance_streamfield_wagtail_7'),
    ]

    operations = [
        migrations.AlterField(
            model_name='medication',
            name='content',
            field=wagtail.fields.StreamField([('dosage', 4), ('side_effects', 10), ('interactions', 16), ('storage', 21), ('images', 27), ('schedules', 34), ('description', 35), ('instructions', 36), ('warnings', 37), ('comparison_table', 49), ('warning_block', 50), ('instructions_block', 51)], blank=True, block_lookup={0: ('wagtail.blocks.DecimalBlock', (), {'decimal_places': 2, 'help_text': 'Dosage amount', 'label': 'Amount', 'max_digits': 8, 'min_value': 0.01, 'validators': [django.core.validators.MinValueValidator(Decimal('0.01')), django.core.validators.MaxValueValidator(Decimal('999999.99'))]}), 1: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('mg', 'Milligrams (mg)'), ('mcg', 'Micrograms (mcg)'), ('ml', 'Milliliters (ml)'), ('g', 'Grams (g)'), ('units', 'Units'), ('drops', 'Drops'), ('puffs', 'Puffs'), ('tablets', 'Tablets'), ('capsules', 'Capsules')], 'help_text': 'Unit of measurement', 'label': 'Unit'}), 2: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('once_daily', 'Once daily'), ('twice_daily', 'Twice daily'), ('three_times_daily', 'Three times daily'), ('four_times_daily', 'Four times daily'), ('as_needed', 'As needed'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], 'help_text': 'How often to take', 'label': 'Frequency'}), 3: ('wagtail.blocks.TextBlock', (), {'help_text': 'Special instructions for taking this dosage', 'label': 'Instructions', 'max_length': 500, 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('amount', 0), ('unit', 1), ('frequency', 2), ('instructions', 3)]], {}), 5: ('wagtail.blocks.CharBlock', (), {'help_text': 'Name of the side effect', 'label': 'Side Effect', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Side effect name contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 6: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life-threatening')], 'help_text': 'Severity of the side effect', 'label': 'Severity'}), 7: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('very_rare', 'Very rare (< 0.1%)'), ('rare', 'Rare (0.1-1%)'), ('uncommon', 'Uncommon (1-10%)'), ('common', 'Common (10-30%)'), ('very_common', 'Very common (> 30%)')], 'help_text': 'How common this side effect is', 'label': 'Frequency'}), 8: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Detailed description of the side effect', 'label': 'Description', 'max_length': 1000, 'required': False}), 9: ('wagtail.blocks.StructBlock', [[('effect_name', 5), ('severity', 6), ('frequency', 7), ('description', 8)]], {}), 10: ('wagtail.blocks.ListBlock', (9,), {'max_num': 50, 'min_num': 0}), 11: ('wagtail.blocks.CharBlock', (), {'help_text': 'Name of the interacting medication or substance', 'label': 'Interacting Substance', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Medication name contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 12: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('major', 'Major - Avoid combination'), ('moderate', 'Moderate - Monitor closely'), ('minor', 'Minor - No action needed')], 'help_text': 'Severity of the interaction', 'label': 'Interaction Type'}), 13: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Description of the interaction and recommendations', 'label': 'Description', 'max_length': 1500}), 14: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Specific recommendations for managing this interaction', 'label': 'Recommendations', 'max_length': 1000, 'required': False}), 15: ('wagtail.blocks.StructBlock', [[('interacting_medication', 11), ('interaction_type', 12), ('description', 13), ('recommendation', 14)]], {}), 16: ('wagtail.blocks.ListBlock', (15,), {'max_num': 100, 'min_num': 0}), 17: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('room_temp', 'Room temperature (15-25째C)'), ('refrigerated', 'Refrigerated (2-8째C)'), ('frozen', 'Frozen (-20째C or below)'), ('controlled_room', 'Controlled room temperature (20-25째C)'), ('cool_dry', 'Cool, dry place')], 'help_text': 'Required storage temperature', 'label': 'Temperature'}), 18: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Whether the medication is light sensitive', 'label': 'Light Sensitive'}), 19: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Whether the medication is humidity sensitive', 'label': 'Humidity Sensitive'}), 20: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Special storage instructions', 'label': 'Special Instructions', 'max_length': 800, 'required': False}), 21: ('wagtail.blocks.StructBlock', [[('temperature_range', 17), ('light_sensitive', 18), ('humidity_sensitive', 19), ('special_instructions', 20)]], {}), 22: ('wagtail.images.blocks.ImageChooserBlock', (), {'help_text': 'Medication image with improved focal point handling', 'label': 'Image'}), 23: ('wagtail.blocks.CharBlock', (), {'help_text': 'Alternative text for accessibility', 'label': 'Alt Text', 'max_length': 200, 'required': False, 'validators': [django.core.validators.RegexValidator(message='Alt text contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 24: ('wagtail.blocks.CharBlock', (), {'help_text': 'Image caption', 'label': 'Caption', 'max_length': 500, 'required': False, 'validators': [django.core.validators.RegexValidator(message='Caption contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 25: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('primary', 'Primary Image'), ('packaging', 'Packaging'), ('tablet', 'Tablet/Capsule'), ('injection', 'Injection Device'), ('inhaler', 'Inhaler'), ('other', 'Other')], 'help_text': 'Type of medication image', 'label': 'Image Type'}), 26: ('wagtail.blocks.StructBlock', [[('image', 22), ('alt_text', 23), ('caption', 24), ('image_type', 25)]], {}), 27: ('wagtail.blocks.ListBlock', (26,), {'max_num': 10, 'min_num': 0}), 28: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('morning', 'Morning'), ('noon', 'Noon'), ('evening', 'Evening'), ('night', 'Night'), ('custom', 'Custom Time')], 'help_text': 'When to take the medication', 'label': 'Timing'}), 29: ('wagtail.blocks.TimeBlock', (), {'help_text': 'Custom time (if timing is custom)', 'label': 'Custom Time', 'required': False}), 30: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')]}), 31: ('wagtail.blocks.ListBlock', (30,), {'help_text': 'Days of the week to take medication', 'label': 'Days of Week', 'max_num': 7, 'min_num': 1}), 32: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Special instructions for this schedule', 'label': 'Instructions', 'max_length': 600, 'required': False}), 33: ('wagtail.blocks.StructBlock', [[('timing', 28), ('custom_time', 29), ('days_of_week', 31), ('instructions', 32)]], {}), 34: ('wagtail.blocks.ListBlock', (33,), {'max_num': 20, 'min_num': 0}), 35: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol', 'h3', 'h4'], 'help_text': 'Detailed description of the medication', 'label': 'Description', 'max_length': 5000}), 36: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol', 'h3', 'h4'], 'help_text': 'Instructions for use', 'label': 'Instructions', 'max_length': 4000}), 37: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Important warnings and precautions', 'label': 'Warnings', 'max_length': 3000}), 38: ('wagtail.blocks.CharBlock', (), {'help_text': 'Title for the comparison table', 'label': 'Table Title', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Table title contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 39: ('wagtail.blocks.CharBlock', (), {'help_text': 'Medication name', 'max_length': 255}), 40: ('wagtail.blocks.CharBlock', (), {'help_text': 'Dosage information', 'max_length': 100}), 41: ('wagtail.blocks.CharBlock', (), {'help_text': 'Side effects', 'max_length': 200}), 42: ('wagtail.blocks.CharBlock', (), {'help_text': 'Cost information', 'max_length': 100}), 43: ('wagtail.blocks.CharBlock', (), {'help_text': 'Efficacy rating', 'max_length': 200}), 44: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'help_text': 'Additional notes'}), 45: ('wagtail.blocks.StructBlock', [[('medication_name', 39), ('dosage', 40), ('side_effects', 41), ('cost', 42), ('efficacy', 43), ('notes', 44)]], {}), 46: ('wagtail.blocks.ListBlock', (45,), {'help_text': 'Table rows for comparison', 'max_num': 20, 'min_num': 1}), 47: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('dosage', 'Dosage Comparison'), ('side_effects', 'Side Effects Comparison'), ('interactions', 'Drug Interactions Comparison'), ('cost', 'Cost Comparison'), ('efficacy', 'Efficacy Comparison'), ('generic_vs_brand', 'Generic vs Brand Comparison')], 'help_text': 'Type of comparison being made', 'label': 'Comparison Type'}), 48: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Additional notes about the comparison', 'label': 'Notes', 'max_length': 1000, 'required': False}), 49: ('wagtail.blocks.StructBlock', [[('title', 38), ('table_rows', 46), ('comparison_type', 47), ('notes', 48)]], {}), 50: ('medications.models.MedicationWarningBlock', (), {}), 51: ('medications.models.MedicationInstructionsBlock', (), {})}, help_text='Rich content for the medication including dosages, side effects, interactions, etc.', verbose_name='Medication Content'),
        ),
        migrations.AlterField(
            model_name='medicationdetailpage',
            name='content',
            field=wagtail.fields.StreamField([('dosage', 4), ('side_effects', 10), ('interactions', 16), ('storage', 21), ('images', 27), ('schedules', 34), ('description', 35), ('instructions', 36), ('warnings', 37), ('comparison_table', 49), ('warning_block', 50), ('instructions_block', 51)], blank=True, block_lookup={0: ('wagtail.blocks.DecimalBlock', (), {'decimal_places': 2, 'help_text': 'Dosage amount', 'label': 'Amount', 'max_digits': 8, 'min_value': 0.01, 'validators': [django.core.validators.MinValueValidator(Decimal('0.01')), django.core.validators.MaxValueValidator(Decimal('999999.99'))]}), 1: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('mg', 'Milligrams (mg)'), ('mcg', 'Micrograms (mcg)'), ('ml', 'Milliliters (ml)'), ('g', 'Grams (g)'), ('units', 'Units'), ('drops', 'Drops'), ('puffs', 'Puffs'), ('tablets', 'Tablets'), ('capsules', 'Capsules')], 'help_text': 'Unit of measurement', 'label': 'Unit'}), 2: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('once_daily', 'Once daily'), ('twice_daily', 'Twice daily'), ('three_times_daily', 'Three times daily'), ('four_times_daily', 'Four times daily'), ('as_needed', 'As needed'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], 'help_text': 'How often to take', 'label': 'Frequency'}), 3: ('wagtail.blocks.TextBlock', (), {'help_text': 'Special instructions for taking this dosage', 'label': 'Instructions', 'max_length': 500, 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('amount', 0), ('unit', 1), ('frequency', 2), ('instructions', 3)]], {}), 5: ('wagtail.blocks.CharBlock', (), {'help_text': 'Name of the side effect', 'label': 'Side Effect', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Side effect name contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 6: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life-threatening')], 'help_text': 'Severity of the side effect', 'label': 'Severity'}), 7: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('very_rare', 'Very rare (< 0.1%)'), ('rare', 'Rare (0.1-1%)'), ('uncommon', 'Uncommon (1-10%)'), ('common', 'Common (10-30%)'), ('very_common', 'Very common (> 30%)')], 'help_text': 'How common this side effect is', 'label': 'Frequency'}), 8: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Detailed description of the side effect', 'label': 'Description', 'max_length': 1000, 'required': False}), 9: ('wagtail.blocks.StructBlock', [[('effect_name', 5), ('severity', 6), ('frequency', 7), ('description', 8)]], {}), 10: ('wagtail.blocks.ListBlock', (9,), {'max_num': 50, 'min_num': 0}), 11: ('wagtail.blocks.CharBlock', (), {'help_text': 'Name of the interacting medication or substance', 'label': 'Interacting Substance', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Medication name contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 12: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('major', 'Major - Avoid combination'), ('moderate', 'Moderate - Monitor closely'), ('minor', 'Minor - No action needed')], 'help_text': 'Severity of the interaction', 'label': 'Interaction Type'}), 13: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Description of the interaction and recommendations', 'label': 'Description', 'max_length': 1500}), 14: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Specific recommendations for managing this interaction', 'label': 'Recommendations', 'max_length': 1000, 'required': False}), 15: ('wagtail.blocks.StructBlock', [[('interacting_medication', 11), ('interaction_type', 12), ('description', 13), ('recommendation', 14)]], {}), 16: ('wagtail.blocks.ListBlock', (15,), {'max_num': 100, 'min_num': 0}), 17: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('room_temp', 'Room temperature (15-25째C)'), ('refrigerated', 'Refrigerated (2-8째C)'), ('frozen', 'Frozen (-20째C or below)'), ('controlled_room', 'Controlled room temperature (20-25째C)'), ('cool_dry', 'Cool, dry place')], 'help_text': 'Required storage temperature', 'label': 'Temperature'}), 18: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Whether the medication is light sensitive', 'label': 'Light Sensitive'}), 19: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Whether the medication is humidity sensitive', 'label': 'Humidity Sensitive'}), 20: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Special storage instructions', 'label': 'Special Instructions', 'max_length': 800, 'required': False}), 21: ('wagtail.blocks.StructBlock', [[('temperature_range', 17), ('light_sensitive', 18), ('humidity_sensitive', 19), ('special_instructions', 20)]], {}), 22: ('wagtail.images.blocks.ImageChooserBlock', (), {'help_text': 'Medication image with improved focal point handling', 'label': 'Image'}), 23: ('wagtail.blocks.CharBlock', (), {'help_text': 'Alternative text for accessibility', 'label': 'Alt Text', 'max_length': 200, 'required': False, 'validators': [django.core.validators.RegexValidator(message='Alt text contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 24: ('wagtail.blocks.CharBlock', (), {'help_text': 'Image caption', 'label': 'Caption', 'max_length': 500, 'required': False, 'validators': [django.core.validators.RegexValidator(message='Caption contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 25: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('primary', 'Primary Image'), ('packaging', 'Packaging'), ('tablet', 'Tablet/Capsule'), ('injection', 'Injection Device'), ('inhaler', 'Inhaler'), ('other', 'Other')], 'help_text': 'Type of medication image', 'label': 'Image Type'}), 26: ('wagtail.blocks.StructBlock', [[('image', 22), ('alt_text', 23), ('caption', 24), ('image_type', 25)]], {}), 27: ('wagtail.blocks.ListBlock', (26,), {'max_num': 10, 'min_num': 0}), 28: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('morning', 'Morning'), ('noon', 'Noon'), ('evening', 'Evening'), ('night', 'Night'), ('custom', 'Custom Time')], 'help_text': 'When to take the medication', 'label': 'Timing'}), 29: ('wagtail.blocks.TimeBlock', (), {'help_text': 'Custom time (if timing is custom)', 'label': 'Custom Time', 'required': False}), 30: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')]}), 31: ('wagtail.blocks.ListBlock', (30,), {'help_text': 'Days of the week to take medication', 'label': 'Days of Week', 'max_num': 7, 'min_num': 1}), 32: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Special instructions for this schedule', 'label': 'Instructions', 'max_length': 600, 'required': False}), 33: ('wagtail.blocks.StructBlock', [[('timing', 28), ('custom_time', 29), ('days_of_week', 31), ('instructions', 32)]], {}), 34: ('wagtail.blocks.ListBlock', (33,), {'max_num': 20, 'min_num': 0}), 35: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol', 'h3', 'h4'], 'help_text': 'Detailed description of the medication', 'label': 'Description', 'max_length': 5000}), 36: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol', 'h3', 'h4'], 'help_text': 'Instructions for use', 'label': 'Instructions', 'max_length': 4000}), 37: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Important warnings and precautions', 'label': 'Warnings', 'max_length': 3000}), 38: ('wagtail.blocks.CharBlock', (), {'help_text': 'Title for the comparison table', 'label': 'Table Title', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Table title contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 39: ('wagtail.blocks.CharBlock', (), {'help_text': 'Medication name', 'max_length': 255}), 40: ('wagtail.blocks.CharBlock', (), {'help_text': 'Dosage information', 'max_length': 100}), 41: ('wagtail.blocks.CharBlock', (), {'help_text': 'Side effects', 'max_length': 200}), 42: ('wagtail.blocks.CharBlock', (), {'help_text': 'Cost information', 'max_length': 100}), 43: ('wagtail.blocks.CharBlock', (), {'help_text': 'Efficacy rating', 'max_length': 200}), 44: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'help_text': 'Additional notes'}), 45: ('wagtail.blocks.StructBlock', [[('medication_name', 39), ('dosage', 40), ('side_effects', 41), ('cost', 42), ('efficacy', 43), ('notes', 44)]], {}), 46: ('wagtail.blocks.ListBlock', (45,), {'help_text': 'Table rows for comparison', 'max_num': 20, 'min_num': 1}), 47: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('dosage', 'Dosage Comparison'), ('side_effects', 'Side Effects Comparison'), ('interactions', 'Drug Interactions Comparison'), ('cost', 'Cost Comparison'), ('efficacy', 'Efficacy Comparison'), ('generic_vs_brand', 'Generic vs Brand Comparison')], 'help_text': 'Type of comparison being made', 'label': 'Comparison Type'}), 48: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Additional notes about the comparison', 'label': 'Notes', 'max_length': 1000, 'required': False}), 49: ('wagtail.blocks.StructBlock', [[('title', 38), ('table_rows', 46), ('comparison_type', 47), ('notes', 48)]], {}), 50: ('medications.models.MedicationWarningBlock', (), {}), 51: ('medications.models.MedicationInstructionsBlock', (), {})}, help_text='Rich content for the medication detail page', verbose_name='Medication Content'),
        ),
        migrations.AlterField(
            model_name='medicationindexpage',
            name='content',
            field=wagtail.fields.StreamField([('dosage', 4), ('side_effects', 10), ('interactions', 16), ('storage', 21), ('images', 27), ('schedules', 34), ('description', 35), ('instructions', 36), ('warnings', 37), ('comparison_table', 49), ('warning_block', 50), ('instructions_block', 51)], blank=True, block_lookup={0: ('wagtail.blocks.DecimalBlock', (), {'decimal_places': 2, 'help_text': 'Dosage amount', 'label': 'Amount', 'max_digits': 8, 'min_value': 0.01, 'validators': [django.core.validators.MinValueValidator(Decimal('0.01')), django.core.validators.MaxValueValidator(Decimal('999999.99'))]}), 1: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('mg', 'Milligrams (mg)'), ('mcg', 'Micrograms (mcg)'), ('ml', 'Milliliters (ml)'), ('g', 'Grams (g)'), ('units', 'Units'), ('drops', 'Drops'), ('puffs', 'Puffs'), ('tablets', 'Tablets'), ('capsules', 'Capsules')], 'help_text': 'Unit of measurement', 'label': 'Unit'}), 2: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('once_daily', 'Once daily'), ('twice_daily', 'Twice daily'), ('three_times_daily', 'Three times daily'), ('four_times_daily', 'Four times daily'), ('as_needed', 'As needed'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], 'help_text': 'How often to take', 'label': 'Frequency'}), 3: ('wagtail.blocks.TextBlock', (), {'help_text': 'Special instructions for taking this dosage', 'label': 'Instructions', 'max_length': 500, 'required': False}), 4: ('wagtail.blocks.StructBlock', [[('amount', 0), ('unit', 1), ('frequency', 2), ('instructions', 3)]], {}), 5: ('wagtail.blocks.CharBlock', (), {'help_text': 'Name of the side effect', 'label': 'Side Effect', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Side effect name contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 6: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life-threatening')], 'help_text': 'Severity of the side effect', 'label': 'Severity'}), 7: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('very_rare', 'Very rare (< 0.1%)'), ('rare', 'Rare (0.1-1%)'), ('uncommon', 'Uncommon (1-10%)'), ('common', 'Common (10-30%)'), ('very_common', 'Very common (> 30%)')], 'help_text': 'How common this side effect is', 'label': 'Frequency'}), 8: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Detailed description of the side effect', 'label': 'Description', 'max_length': 1000, 'required': False}), 9: ('wagtail.blocks.StructBlock', [[('effect_name', 5), ('severity', 6), ('frequency', 7), ('description', 8)]], {}), 10: ('wagtail.blocks.ListBlock', (9,), {'max_num': 50, 'min_num': 0}), 11: ('wagtail.blocks.CharBlock', (), {'help_text': 'Name of the interacting medication or substance', 'label': 'Interacting Substance', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Medication name contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 12: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('major', 'Major - Avoid combination'), ('moderate', 'Moderate - Monitor closely'), ('minor', 'Minor - No action needed')], 'help_text': 'Severity of the interaction', 'label': 'Interaction Type'}), 13: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Description of the interaction and recommendations', 'label': 'Description', 'max_length': 1500}), 14: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Specific recommendations for managing this interaction', 'label': 'Recommendations', 'max_length': 1000, 'required': False}), 15: ('wagtail.blocks.StructBlock', [[('interacting_medication', 11), ('interaction_type', 12), ('description', 13), ('recommendation', 14)]], {}), 16: ('wagtail.blocks.ListBlock', (15,), {'max_num': 100, 'min_num': 0}), 17: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('room_temp', 'Room temperature (15-25째C)'), ('refrigerated', 'Refrigerated (2-8째C)'), ('frozen', 'Frozen (-20째C or below)'), ('controlled_room', 'Controlled room temperature (20-25째C)'), ('cool_dry', 'Cool, dry place')], 'help_text': 'Required storage temperature', 'label': 'Temperature'}), 18: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Whether the medication is light sensitive', 'label': 'Light Sensitive'}), 19: ('wagtail.blocks.BooleanBlock', (), {'default': False, 'help_text': 'Whether the medication is humidity sensitive', 'label': 'Humidity Sensitive'}), 20: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Special storage instructions', 'label': 'Special Instructions', 'max_length': 800, 'required': False}), 21: ('wagtail.blocks.StructBlock', [[('temperature_range', 17), ('light_sensitive', 18), ('humidity_sensitive', 19), ('special_instructions', 20)]], {}), 22: ('wagtail.images.blocks.ImageChooserBlock', (), {'help_text': 'Medication image with improved focal point handling', 'label': 'Image'}), 23: ('wagtail.blocks.CharBlock', (), {'help_text': 'Alternative text for accessibility', 'label': 'Alt Text', 'max_length': 200, 'required': False, 'validators': [django.core.validators.RegexValidator(message='Alt text contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 24: ('wagtail.blocks.CharBlock', (), {'help_text': 'Image caption', 'label': 'Caption', 'max_length': 500, 'required': False, 'validators': [django.core.validators.RegexValidator(message='Caption contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 25: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('primary', 'Primary Image'), ('packaging', 'Packaging'), ('tablet', 'Tablet/Capsule'), ('injection', 'Injection Device'), ('inhaler', 'Inhaler'), ('other', 'Other')], 'help_text': 'Type of medication image', 'label': 'Image Type'}), 26: ('wagtail.blocks.StructBlock', [[('image', 22), ('alt_text', 23), ('caption', 24), ('image_type', 25)]], {}), 27: ('wagtail.blocks.ListBlock', (26,), {'max_num': 10, 'min_num': 0}), 28: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('morning', 'Morning'), ('noon', 'Noon'), ('evening', 'Evening'), ('night', 'Night'), ('custom', 'Custom Time')], 'help_text': 'When to take the medication', 'label': 'Timing'}), 29: ('wagtail.blocks.TimeBlock', (), {'help_text': 'Custom time (if timing is custom)', 'label': 'Custom Time', 'required': False}), 30: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')]}), 31: ('wagtail.blocks.ListBlock', (30,), {'help_text': 'Days of the week to take medication', 'label': 'Days of Week', 'max_num': 7, 'min_num': 1}), 32: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Special instructions for this schedule', 'label': 'Instructions', 'max_length': 600, 'required': False}), 33: ('wagtail.blocks.StructBlock', [[('timing', 28), ('custom_time', 29), ('days_of_week', 31), ('instructions', 32)]], {}), 34: ('wagtail.blocks.ListBlock', (33,), {'max_num': 20, 'min_num': 0}), 35: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol', 'h3', 'h4'], 'help_text': 'Detailed description of the medication', 'label': 'Description', 'max_length': 5000}), 36: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol', 'h3', 'h4'], 'help_text': 'Instructions for use', 'label': 'Instructions', 'max_length': 4000}), 37: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Important warnings and precautions', 'label': 'Warnings', 'max_length': 3000}), 38: ('wagtail.blocks.CharBlock', (), {'help_text': 'Title for the comparison table', 'label': 'Table Title', 'max_length': 200, 'validators': [django.core.validators.RegexValidator(message='Table title contains invalid characters', regex='^[A-Za-z0-9\\s\\-\\.\\(\\)]+$')]}), 39: ('wagtail.blocks.CharBlock', (), {'help_text': 'Medication name', 'max_length': 255}), 40: ('wagtail.blocks.CharBlock', (), {'help_text': 'Dosage information', 'max_length': 100}), 41: ('wagtail.blocks.CharBlock', (), {'help_text': 'Side effects', 'max_length': 200}), 42: ('wagtail.blocks.CharBlock', (), {'help_text': 'Cost information', 'max_length': 100}), 43: ('wagtail.blocks.CharBlock', (), {'help_text': 'Efficacy rating', 'max_length': 200}), 44: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link'], 'help_text': 'Additional notes'}), 45: ('wagtail.blocks.StructBlock', [[('medication_name', 39), ('dosage', 40), ('side_effects', 41), ('cost', 42), ('efficacy', 43), ('notes', 44)]], {}), 46: ('wagtail.blocks.ListBlock', (45,), {'help_text': 'Table rows for comparison', 'max_num': 20, 'min_num': 1}), 47: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('dosage', 'Dosage Comparison'), ('side_effects', 'Side Effects Comparison'), ('interactions', 'Drug Interactions Comparison'), ('cost', 'Cost Comparison'), ('efficacy', 'Efficacy Comparison'), ('generic_vs_brand', 'Generic vs Brand Comparison')], 'help_text': 'Type of comparison being made', 'label': 'Comparison Type'}), 48: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol'], 'help_text': 'Additional notes about the comparison', 'label': 'Notes', 'max_length': 1000, 'required': False}), 49: ('wagtail.blocks.StructBlock', [[('title', 38), ('table_rows', 46), ('comparison_type', 47), ('notes', 48)]], {}), 50: ('medications.models.MedicationWarningBlock', (), {}), 51: ('medications.models.MedicationInstructionsBlock', (), {})}, help_text='Rich content for the medications index page', verbose_name='Page Content'),
        ),
    ]
