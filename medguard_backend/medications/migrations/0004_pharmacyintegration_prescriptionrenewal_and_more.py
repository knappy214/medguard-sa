# Generated by Django 5.2.4 on 2025-07-29 16:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('medications', '0003_medicationindexpage_medicationdetailpage'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PharmacyIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the pharmacy integration', max_length=200)),
                ('pharmacy_name', models.CharField(help_text='Name of the pharmacy', max_length=200)),
                ('integration_type', models.CharField(choices=[('api', 'API Integration'), ('edi', 'EDI Integration'), ('manual', 'Manual Integration'), ('webhook', 'Webhook Integration')], default='api', help_text='Type of integration', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('testing', 'Testing'), ('error', 'Error')], default='inactive', help_text='Current status of the integration', max_length=20)),
                ('api_endpoint', models.URLField(blank=True, help_text='API endpoint for the integration')),
                ('api_key', models.CharField(blank=True, help_text='API key for authentication', max_length=255)),
                ('webhook_url', models.URLField(blank=True, help_text='Webhook URL for receiving updates')),
                ('auto_order_enabled', models.BooleanField(default=False, help_text='Whether to enable automatic ordering')),
                ('order_threshold', models.PositiveIntegerField(default=10, help_text='Stock threshold for automatic ordering')),
                ('order_quantity_multiplier', models.FloatField(default=1.0, help_text='Multiplier for order quantities')),
                ('order_lead_time_days', models.PositiveIntegerField(default=3, help_text='Expected lead time for orders in days')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Pharmacy Integration',
                'verbose_name_plural': 'Pharmacy Integrations',
                'db_table': 'pharmacy_integrations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PrescriptionRenewal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prescription_number', models.CharField(help_text='Prescription number', max_length=100)),
                ('prescribed_by', models.CharField(help_text='Name of the prescribing doctor', max_length=200)),
                ('prescribed_date', models.DateField(help_text='Date when prescription was issued')),
                ('expiry_date', models.DateField(help_text='Date when prescription expires')),
                ('status', models.CharField(choices=[('active', 'Active'), ('pending_renewal', 'Pending Renewal'), ('renewed', 'Renewed'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the prescription', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level for renewal', max_length=20)),
                ('reminder_days_before', models.PositiveIntegerField(default=30, help_text='Days before expiry to start sending reminders')),
                ('last_reminder_sent', models.DateTimeField(blank=True, help_text='When the last reminder was sent', null=True)),
                ('renewed_date', models.DateField(blank=True, help_text='Date when prescription was renewed', null=True)),
                ('new_expiry_date', models.DateField(blank=True, help_text='New expiry date after renewal', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the prescription')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Prescription Renewal',
                'verbose_name_plural': 'Prescription Renewals',
                'db_table': 'prescription_renewals',
                'ordering': ['expiry_date'],
            },
        ),
        migrations.CreateModel(
            name='StockAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_usage_rate', models.FloatField(default=0.0, help_text='Average daily usage rate (units per day)')),
                ('weekly_usage_rate', models.FloatField(default=0.0, help_text='Average weekly usage rate (units per week)')),
                ('monthly_usage_rate', models.FloatField(default=0.0, help_text='Average monthly usage rate (units per month)')),
                ('days_until_stockout', models.PositiveIntegerField(blank=True, help_text='Predicted days until stock runs out', null=True)),
                ('predicted_stockout_date', models.DateField(blank=True, help_text='Predicted date when stock will run out', null=True)),
                ('recommended_order_quantity', models.PositiveIntegerField(default=0, help_text='Recommended quantity to order')),
                ('recommended_order_date', models.DateField(blank=True, help_text='Recommended date to place order', null=True)),
                ('seasonal_factor', models.FloatField(default=1.0, help_text='Seasonal adjustment factor for usage patterns')),
                ('usage_volatility', models.FloatField(default=0.0, help_text='Standard deviation of daily usage')),
                ('stockout_confidence', models.FloatField(default=0.0, help_text='Confidence level for stockout prediction (0-1)')),
                ('last_calculated', models.DateTimeField(auto_now=True, help_text='When these analytics were last calculated')),
                ('calculation_window_days', models.PositiveIntegerField(default=90, help_text='Number of days to use for calculations')),
            ],
            options={
                'verbose_name': 'Stock Analytics',
                'verbose_name_plural': 'Stock Analytics',
                'db_table': 'stock_analytics',
            },
        ),
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('purchase', 'Purchase'), ('sale', 'Sale'), ('adjustment', 'Adjustment'), ('transfer', 'Transfer'), ('expiry', 'Expiry'), ('damage', 'Damage'), ('return', 'Return'), ('prescription_filled', 'Prescription Filled'), ('dose_taken', 'Dose Taken')], help_text='Type of stock transaction', max_length=30)),
                ('quantity', models.IntegerField(help_text='Quantity involved in the transaction (positive for additions, negative for removals)')),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, help_text='Unit price for the transaction', max_digits=10, null=True)),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total amount for the transaction', max_digits=12, null=True)),
                ('stock_before', models.PositiveIntegerField(help_text='Stock level before this transaction')),
                ('stock_after', models.PositiveIntegerField(help_text='Stock level after this transaction')),
                ('reference_number', models.CharField(blank=True, help_text='Reference number for the transaction (invoice, prescription, etc.)', max_length=100)),
                ('batch_number', models.CharField(blank=True, help_text='Batch number for the medication', max_length=100)),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date for this batch', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the transaction')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Stock Transaction',
                'verbose_name_plural': 'Stock Transactions',
                'db_table': 'stock_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockVisualization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chart_type', models.CharField(choices=[('line', 'Line Chart'), ('bar', 'Bar Chart'), ('pie', 'Pie Chart'), ('scatter', 'Scatter Plot'), ('heatmap', 'Heatmap')], default='line', help_text='Type of chart to display', max_length=20)),
                ('title', models.CharField(help_text='Title of the chart', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the chart')),
                ('chart_data', models.JSONField(default=dict, help_text='Chart data in JSON format')),
                ('chart_options', models.JSONField(default=dict, help_text='Chart configuration options')),
                ('start_date', models.DateField(help_text='Start date for the chart data')),
                ('end_date', models.DateField(help_text='End date for the chart data')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this visualization is active')),
                ('auto_refresh', models.BooleanField(default=True, help_text='Whether to automatically refresh this chart')),
                ('refresh_interval_hours', models.PositiveIntegerField(default=24, help_text='Hours between automatic refreshes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_generated', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Stock Visualization',
                'verbose_name_plural': 'Stock Visualizations',
                'db_table': 'stock_visualizations',
                'ordering': ['title'],
            },
        ),
        migrations.AddField(
            model_name='medication',
            name='image_alt_text',
            field=models.CharField(blank=True, help_text='Alt text for medication image accessibility', max_length=200),
        ),
        migrations.AddField(
            model_name='medication',
            name='image_metadata',
            field=models.JSONField(default=dict, help_text='Metadata about the medication image (dimensions, format, etc.)'),
        ),
        migrations.AddField(
            model_name='medication',
            name='image_optimization_level',
            field=models.CharField(choices=[('none', 'None'), ('basic', 'Basic'), ('standard', 'Standard'), ('high', 'High'), ('maximum', 'Maximum')], default='standard', help_text='Level of image optimization applied', max_length=10),
        ),
        migrations.AddField(
            model_name='medication',
            name='image_processing_attempts',
            field=models.PositiveIntegerField(default=0, help_text='Number of image processing attempts'),
        ),
        migrations.AddField(
            model_name='medication',
            name='image_processing_error',
            field=models.TextField(blank=True, help_text='Last error message from image processing'),
        ),
        migrations.AddField(
            model_name='medication',
            name='image_processing_last_attempt',
            field=models.DateTimeField(blank=True, help_text='Last time image processing was attempted', null=True),
        ),
        migrations.AddField(
            model_name='medication',
            name='image_processing_priority',
            field=models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level for image processing', max_length=10),
        ),
        migrations.AddField(
            model_name='medication',
            name='image_processing_status',
            field=models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Status of image processing', max_length=20),
        ),
        migrations.AddField(
            model_name='medication',
            name='medication_image',
            field=models.ImageField(blank=True, help_text='Primary medication image', null=True, upload_to='medications/images/'),
        ),
        migrations.AddField(
            model_name='medication',
            name='medication_image_avif',
            field=models.ImageField(blank=True, help_text='AVIF optimized version of medication image', null=True, upload_to='medications/avif/'),
        ),
        migrations.AddField(
            model_name='medication',
            name='medication_image_jpeg_xl',
            field=models.ImageField(blank=True, help_text='JPEG XL optimized version of medication image', null=True, upload_to='medications/jxl/'),
        ),
        migrations.AddField(
            model_name='medication',
            name='medication_image_original',
            field=models.ImageField(blank=True, help_text='Original unprocessed medication image', null=True, upload_to='medications/original/'),
        ),
        migrations.AddField(
            model_name='medication',
            name='medication_image_thumbnail',
            field=models.ImageField(blank=True, help_text='Thumbnail version of medication image', null=True, upload_to='medications/thumbnails/'),
        ),
        migrations.AddField(
            model_name='medication',
            name='medication_image_webp',
            field=models.ImageField(blank=True, help_text='WebP optimized version of medication image', null=True, upload_to='medications/webp/'),
        ),
        migrations.AlterField(
            model_name='medicationlog',
            name='patient',
            field=models.ForeignKey(help_text='Patient who took the medication', limit_choices_to={'user_type': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='medication_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='medicationschedule',
            name='patient',
            field=models.ForeignKey(help_text='Patient for whom this schedule is created', limit_choices_to={'user_type': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='medication_schedules', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['manufacturer'], name='medications_manufac_6c1b23_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['expiration_date'], name='medications_expirat_c4066c_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['created_at'], name='medications_created_feb6eb_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['updated_at'], name='medications_updated_88ad2d_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['medication_type', 'prescription_type'], name='medications_medicat_a7b286_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['pill_count', 'low_stock_threshold'], name='medications_pill_co_c7cfb4_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['expiration_date', 'pill_count'], name='medications_expirat_2e7409_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['manufacturer', 'medication_type'], name='medications_manufac_e3a43b_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['name', 'generic_name'], name='medications_name_f39e65_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['pill_count', 'low_stock_threshold'], name='medication_stock_threshold_idx'),
        ),
        migrations.AddIndex(
            model_name='medication',
            index=models.Index(fields=['expiration_date', 'pill_count'], name='medication_expiry_stock_idx'),
        ),
        migrations.AddIndex(
            model_name='pharmacyintegration',
            index=models.Index(fields=['status'], name='pharmacy_in_status_7a418d_idx'),
        ),
        migrations.AddIndex(
            model_name='pharmacyintegration',
            index=models.Index(fields=['integration_type'], name='pharmacy_in_integra_98c2f6_idx'),
        ),
        migrations.AddIndex(
            model_name='pharmacyintegration',
            index=models.Index(fields=['last_sync'], name='pharmacy_in_last_sy_f942e5_idx'),
        ),
        migrations.AddField(
            model_name='prescriptionrenewal',
            name='medication',
            field=models.ForeignKey(help_text='Medication for this prescription', on_delete=django.db.models.deletion.CASCADE, related_name='prescription_renewals', to='medications.medication'),
        ),
        migrations.AddField(
            model_name='prescriptionrenewal',
            name='patient',
            field=models.ForeignKey(help_text='Patient for this prescription', limit_choices_to={'user_type': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='prescription_renewals', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stockanalytics',
            name='medication',
            field=models.OneToOneField(help_text='Medication for these analytics', on_delete=django.db.models.deletion.CASCADE, related_name='stock_analytics', to='medications.medication'),
        ),
        migrations.AddField(
            model_name='stocktransaction',
            name='medication',
            field=models.ForeignKey(help_text='Medication involved in this transaction', on_delete=django.db.models.deletion.CASCADE, related_name='stock_transactions', to='medications.medication'),
        ),
        migrations.AddField(
            model_name='stocktransaction',
            name='user',
            field=models.ForeignKey(help_text='User who initiated this transaction', on_delete=django.db.models.deletion.CASCADE, related_name='stock_transactions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stockvisualization',
            name='medication',
            field=models.ForeignKey(help_text='Medication for this visualization', on_delete=django.db.models.deletion.CASCADE, related_name='stock_visualizations', to='medications.medication'),
        ),
        migrations.AddIndex(
            model_name='prescriptionrenewal',
            index=models.Index(fields=['patient', 'medication'], name='prescriptio_patient_672612_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionrenewal',
            index=models.Index(fields=['status'], name='prescriptio_status_27df2a_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionrenewal',
            index=models.Index(fields=['priority'], name='prescriptio_priorit_3bc1fd_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionrenewal',
            index=models.Index(fields=['expiry_date'], name='prescriptio_expiry__62dde1_idx'),
        ),
        migrations.AddIndex(
            model_name='prescriptionrenewal',
            index=models.Index(fields=['prescribed_date'], name='prescriptio_prescri_ebd302_idx'),
        ),
        migrations.AddIndex(
            model_name='stockanalytics',
            index=models.Index(fields=['medication'], name='stock_analy_medicat_3a642b_idx'),
        ),
        migrations.AddIndex(
            model_name='stockanalytics',
            index=models.Index(fields=['last_calculated'], name='stock_analy_last_ca_32da15_idx'),
        ),
        migrations.AddIndex(
            model_name='stockanalytics',
            index=models.Index(fields=['days_until_stockout'], name='stock_analy_days_un_6d8709_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['medication', 'transaction_type'], name='stock_trans_medicat_cb89c1_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['created_at'], name='stock_trans_created_1ba426_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['user', 'created_at'], name='stock_trans_user_id_1d3c81_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['batch_number'], name='stock_trans_batch_n_1f283c_idx'),
        ),
        migrations.AddIndex(
            model_name='stocktransaction',
            index=models.Index(fields=['expiry_date'], name='stock_trans_expiry__149cda_idx'),
        ),
        migrations.AddIndex(
            model_name='stockvisualization',
            index=models.Index(fields=['medication', 'chart_type'], name='stock_visua_medicat_7ff013_idx'),
        ),
        migrations.AddIndex(
            model_name='stockvisualization',
            index=models.Index(fields=['is_active'], name='stock_visua_is_acti_0f30ef_idx'),
        ),
        migrations.AddIndex(
            model_name='stockvisualization',
            index=models.Index(fields=['last_generated'], name='stock_visua_last_ge_8f4300_idx'),
        ),
    ]
