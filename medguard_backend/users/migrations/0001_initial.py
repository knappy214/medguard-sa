# Generated by Django 5.2.4 on 2025-07-31 11:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('user_type', models.CharField(choices=[('PATIENT', 'Patient'), ('CAREGIVER', 'Caregiver'), ('HEALTHCARE_PROVIDER', 'Healthcare Provider')], default='PATIENT', max_length=20, verbose_name='User Type')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Phone Number')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20, verbose_name='Gender')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('province', models.CharField(blank=True, choices=[('gauteng', 'Gauteng'), ('western_cape', 'Western Cape'), ('kwazulu_natal', 'KwaZulu-Natal'), ('eastern_cape', 'Eastern Cape'), ('free_state', 'Free State'), ('mpumalanga', 'Mpumalanga'), ('limpopo', 'Limpopo'), ('north_west', 'North West'), ('northern_cape', 'Northern Cape')], max_length=50, verbose_name='Province')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='Postal Code')),
                ('blood_type', models.CharField(blank=True, choices=[('a_positive', 'A+'), ('a_negative', 'A-'), ('b_positive', 'B+'), ('b_negative', 'B-'), ('ab_positive', 'AB+'), ('ab_negative', 'AB-'), ('o_positive', 'O+'), ('o_negative', 'O-')], max_length=15, verbose_name='Blood Type')),
                ('allergies', models.TextField(blank=True, verbose_name='Allergies')),
                ('medical_conditions', models.TextField(blank=True, verbose_name='Medical Conditions')),
                ('current_medications', models.TextField(blank=True, verbose_name='Current Medications')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, verbose_name='Emergency Contact Name')),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, verbose_name='Emergency Contact Phone')),
                ('emergency_contact_relationship', models.CharField(blank=True, choices=[('spouse', 'Spouse'), ('parent', 'Parent'), ('child', 'Child'), ('sibling', 'Sibling'), ('friend', 'Friend'), ('other', 'Other')], max_length=20, verbose_name='Relationship to Emergency Contact')),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('af', 'Afrikaans')], default='en', max_length=2, verbose_name='Preferred Language')),
                ('timezone', models.CharField(choices=[('Africa/Johannesburg', 'South Africa Standard Time (SAST)'), ('UTC', 'UTC')], default='Africa/Johannesburg', max_length=50, verbose_name='Timezone')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Email Notifications')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='SMS Notifications')),
                ('mfa_enabled', models.BooleanField(default=False, verbose_name='Two-Factor Authentication')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAvatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='avatars/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp'])], verbose_name='Avatar Image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Avatar',
                'verbose_name_plural': 'User Avatars',
                'db_table': 'users_user_avatar',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('professional_title', models.CharField(blank=True, max_length=100, verbose_name='Professional Title')),
                ('license_number', models.CharField(blank=True, max_length=50, verbose_name='License Number')),
                ('specialization', models.CharField(blank=True, max_length=100, verbose_name='Specialization')),
                ('facility_name', models.CharField(blank=True, max_length=200, verbose_name='Facility Name')),
                ('facility_address', models.TextField(blank=True, verbose_name='Facility Address')),
                ('facility_phone', models.CharField(blank=True, max_length=20, verbose_name='Facility Phone')),
                ('notification_preferences', models.JSONField(blank=True, default=dict, verbose_name='Notification Preferences')),
                ('privacy_settings', models.JSONField(blank=True, default=dict, verbose_name='Privacy Settings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'users_user_profile',
            },
        ),
    ]
