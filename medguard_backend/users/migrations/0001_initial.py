# Generated by Django 5.2.4 on 2025-07-28 09:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('patient', 'Patient'), ('caregiver', 'Caregiver'), ('healthcare_provider', 'Healthcare Provider'), ('admin', 'Administrator')], default='patient', help_text='Type of user in the healthcare system', max_length=20)),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth", null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], help_text="User's gender", max_length=20, null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number in international format', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('medical_record_number', models.CharField(blank=True, help_text='Unique medical record number', max_length=50, null=True, unique=True)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Name of emergency contact', max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('emergency_contact_relationship', models.CharField(blank=True, help_text='Relationship to emergency contact', max_length=50)),
                ('primary_healthcare_provider', models.CharField(blank=True, help_text='Name of primary healthcare provider', max_length=100)),
                ('healthcare_provider_phone', models.CharField(blank=True, help_text='Healthcare provider phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('af', 'Afrikaans')], default='en', help_text='Preferred language for communications', max_length=10)),
                ('timezone', models.CharField(default='UTC', help_text="User's timezone for medication scheduling", max_length=50)),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('sms_notifications', models.BooleanField(default=True, help_text='Receive SMS notifications')),
                ('push_notifications', models.BooleanField(default=True, help_text='Receive push notifications')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'indexes': [models.Index(fields=['user_type'], name='users_user_ty_578f8f_idx'), models.Index(fields=['medical_record_number'], name='users_medical_90b59d_idx'), models.Index(fields=['email'], name='users_email_4b85f2_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
