# Generated by Django 5.2.4 on 2025-07-29 12:39

import django.db.models.deletion
import wagtail.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0094_alter_page_locale'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', wagtail.fields.RichTextField(blank=True, help_text='Introduction text for the notifications page', verbose_name='Introduction')),
            ],
            options={
                'verbose_name': 'Notification Index Page',
                'verbose_name_plural': 'Notification Index Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the notification', max_length=200, verbose_name='Title')),
                ('content', wagtail.fields.RichTextField(help_text='Content of the notification', verbose_name='Content')),
                ('notification_type', models.CharField(choices=[('system', 'System Notification'), ('medication', 'Medication Alert'), ('stock', 'Stock Alert'), ('maintenance', 'Maintenance Notice'), ('security', 'Security Alert'), ('general', 'General Announcement')], default='general', help_text='Type of notification', max_length=20, verbose_name='Notification Type')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of the notification', max_length=20, verbose_name='Priority')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('inactive', 'Inactive'), ('archived', 'Archived')], default='draft', help_text='Current status of the notification', max_length=20, verbose_name='Status')),
                ('target_user_types', models.JSONField(default=list, help_text='List of user types this notification targets', verbose_name='Target User Types')),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='When to send this notification (leave empty for immediate)', null=True, verbose_name='Scheduled At')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this notification expires (leave empty for no expiration)', null=True, verbose_name='Expires At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this notification is currently active', verbose_name='Is Active')),
                ('show_on_dashboard', models.BooleanField(default=True, help_text='Whether to show this notification on the dashboard', verbose_name='Show on Dashboard')),
                ('require_acknowledgment', models.BooleanField(default=False, help_text='Whether users must acknowledge this notification', verbose_name='Require Acknowledgment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this notification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('target_users', models.ManyToManyField(blank=True, help_text='Specific users to receive this notification', to=settings.AUTH_USER_MODEL, verbose_name='Target Users')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'medguard_notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationDetailPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('additional_info', wagtail.fields.RichTextField(blank=True, help_text='Additional information about the notification', verbose_name='Additional Information')),
                ('notification', models.OneToOneField(help_text='Associated notification record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='detail_page', to='medguard_notifications.notification', verbose_name='Notification')),
            ],
            options={
                'verbose_name': 'Notification Detail Page',
                'verbose_name_plural': 'Notification Detail Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the notification template', max_length=200, verbose_name='Template Name')),
                ('template_type', models.CharField(choices=[('email', 'Email Template'), ('sms', 'SMS Template'), ('push', 'Push Notification Template'), ('in_app', 'In-App Notification Template')], help_text='Type of notification template', max_length=20, verbose_name='Template Type')),
                ('subject', models.CharField(blank=True, help_text='Subject line for email templates', max_length=200, verbose_name='Subject')),
                ('content', models.TextField(help_text='Template content with placeholders', verbose_name='Content')),
                ('variables', models.JSONField(default=dict, help_text='Available variables for this template', verbose_name='Variables')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this template', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_templates', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
                'db_table': 'medguard_notification_templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('unread', 'Unread'), ('read', 'Read'), ('acknowledged', 'Acknowledged'), ('dismissed', 'Dismissed')], default='unread', help_text='Current status of this notification for the user', max_length=20, verbose_name='Status')),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='When this notification was sent to the user', verbose_name='Sent At')),
                ('read_at', models.DateTimeField(blank=True, help_text='When the user read this notification', null=True, verbose_name='Read At')),
                ('acknowledged_at', models.DateTimeField(blank=True, help_text='When the user acknowledged this notification', null=True, verbose_name='Acknowledged At')),
                ('dismissed_at', models.DateTimeField(blank=True, help_text='When the user dismissed this notification', null=True, verbose_name='Dismissed At')),
                ('notification', models.ForeignKey(help_text='Associated notification', on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to='medguard_notifications.notification', verbose_name='Notification')),
                ('user', models.ForeignKey(help_text='User who received this notification', on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Notification',
                'verbose_name_plural': 'User Notifications',
                'db_table': 'medguard_user_notifications',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNotificationPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications_enabled', models.BooleanField(default=True, help_text='Whether to send email notifications', verbose_name='Email Notifications Enabled')),
                ('email_time_preference', models.CharField(choices=[('immediate', 'Immediate'), ('morning', 'Morning (8:00 AM)'), ('afternoon', 'Afternoon (2:00 PM)'), ('evening', 'Evening (8:00 PM)'), ('custom', 'Custom Time')], default='immediate', help_text='When to send email notifications', max_length=20, verbose_name='Email Time Preference')),
                ('email_custom_time', models.TimeField(blank=True, help_text='Custom time for email notifications', null=True, verbose_name='Email Custom Time')),
                ('sms_notifications_enabled', models.BooleanField(default=False, help_text='Whether to send SMS notifications', verbose_name='SMS Notifications Enabled')),
                ('sms_phone_number', models.CharField(blank=True, help_text='Phone number for SMS notifications', max_length=20, verbose_name='SMS Phone Number')),
                ('sms_time_preference', models.CharField(choices=[('immediate', 'Immediate'), ('morning', 'Morning (8:00 AM)'), ('afternoon', 'Afternoon (2:00 PM)'), ('evening', 'Evening (8:00 PM)'), ('custom', 'Custom Time')], default='immediate', help_text='When to send SMS notifications', max_length=20, verbose_name='SMS Time Preference')),
                ('push_notifications_enabled', models.BooleanField(default=True, help_text='Whether to send push notifications', verbose_name='Push Notifications Enabled')),
                ('push_device_token', models.CharField(blank=True, help_text='Device token for push notifications', max_length=255, verbose_name='Push Device Token')),
                ('in_app_notifications_enabled', models.BooleanField(default=True, help_text='Whether to show in-app notifications', verbose_name='In-App Notifications Enabled')),
                ('medication_reminders_enabled', models.BooleanField(default=True, help_text='Whether to receive medication reminders', verbose_name='Medication Reminders Enabled')),
                ('stock_alerts_enabled', models.BooleanField(default=True, help_text='Whether to receive stock alerts', verbose_name='Stock Alerts Enabled')),
                ('system_notifications_enabled', models.BooleanField(default=True, help_text='Whether to receive system notifications', verbose_name='System Notifications Enabled')),
                ('quiet_hours_enabled', models.BooleanField(default=False, help_text='Whether to enable quiet hours', verbose_name='Quiet Hours Enabled')),
                ('quiet_hours_start', models.TimeField(blank=True, default='22:00', help_text='Start time for quiet hours', null=True, verbose_name='Quiet Hours Start')),
                ('quiet_hours_end', models.TimeField(blank=True, default='08:00', help_text='End time for quiet hours', null=True, verbose_name='Quiet Hours End')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(help_text='User who owns these preferences', on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Notification Preference',
                'verbose_name_plural': 'User Notification Preferences',
                'db_table': 'medguard_user_notification_preferences',
            },
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='medguard_no_notific_4fc249_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['priority'], name='medguard_no_priorit_23babf_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['status'], name='medguard_no_status_286968_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['is_active'], name='medguard_no_is_acti_29cfd8_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_at'], name='medguard_no_schedul_c74e50_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['expires_at'], name='medguard_no_expires_a74fc3_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='medguard_no_created_daf814_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['template_type'], name='medguard_no_templat_346126_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['is_active'], name='medguard_no_is_acti_394a10_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['name'], name='medguard_no_name_0d7a1f_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotification',
            index=models.Index(fields=['user', 'notification'], name='medguard_us_user_id_027665_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotification',
            index=models.Index(fields=['user', 'status'], name='medguard_us_user_id_4bef1e_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotification',
            index=models.Index(fields=['status'], name='medguard_us_status_af67f7_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotification',
            index=models.Index(fields=['sent_at'], name='medguard_us_sent_at_dc63ef_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usernotification',
            unique_together={('user', 'notification')},
        ),
        migrations.AddIndex(
            model_name='usernotificationpreferences',
            index=models.Index(fields=['user'], name='medguard_us_user_id_ee84b0_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotificationpreferences',
            index=models.Index(fields=['email_notifications_enabled'], name='medguard_us_email_n_87f377_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotificationpreferences',
            index=models.Index(fields=['push_notifications_enabled'], name='medguard_us_push_no_0b1ed2_idx'),
        ),
    ]
